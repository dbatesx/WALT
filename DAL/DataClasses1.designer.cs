#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.276
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WALT.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WALT_BETA_TEST")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaction(action instance);
    partial void Updateaction(action instance);
    partial void Deleteaction(action instance);
    partial void Insertweekly_task(weekly_task instance);
    partial void Updateweekly_task(weekly_task instance);
    partial void Deleteweekly_task(weekly_task instance);
    partial void Insertalert(alert instance);
    partial void Updatealert(alert instance);
    partial void Deletealert(alert instance);
    partial void Insertbarrier(barrier instance);
    partial void Updatebarrier(barrier instance);
    partial void Deletebarrier(barrier instance);
    partial void Insertbarriers_description(barriers_description instance);
    partial void Updatebarriers_description(barriers_description instance);
    partial void Deletebarriers_description(barriers_description instance);
    partial void Insertcomplexity(complexity instance);
    partial void Updatecomplexity(complexity instance);
    partial void Deletecomplexity(complexity instance);
    partial void Insertfavorite_plan_hour(favorite_plan_hour instance);
    partial void Updatefavorite_plan_hour(favorite_plan_hour instance);
    partial void Deletefavorite_plan_hour(favorite_plan_hour instance);
    partial void Insertfavorite(favorite instance);
    partial void Updatefavorite(favorite instance);
    partial void Deletefavorite(favorite instance);
    partial void Insertlog(log instance);
    partial void Updatelog(log instance);
    partial void Deletelog(log instance);
    partial void Insertpatch(patch instance);
    partial void Updatepatch(patch instance);
    partial void Deletepatch(patch instance);
    partial void Insertpreference(preference instance);
    partial void Updatepreference(preference instance);
    partial void Deletepreference(preference instance);
    partial void Insertprofile_log(profile_log instance);
    partial void Updateprofile_log(profile_log instance);
    partial void Deleteprofile_log(profile_log instance);
    partial void Insertprofile(profile instance);
    partial void Updateprofile(profile instance);
    partial void Deleteprofile(profile instance);
    partial void Insertprogram(program instance);
    partial void Updateprogram(program instance);
    partial void Deleteprogram(program instance);
    partial void Insertreport_group_group(report_group_group instance);
    partial void Updatereport_group_group(report_group_group instance);
    partial void Deletereport_group_group(report_group_group instance);
    partial void Insertreport_group_profile(report_group_profile instance);
    partial void Updatereport_group_profile(report_group_profile instance);
    partial void Deletereport_group_profile(report_group_profile instance);
    partial void Insertreport_group_team(report_group_team instance);
    partial void Updatereport_group_team(report_group_team instance);
    partial void Deletereport_group_team(report_group_team instance);
    partial void Insertreport_group(report_group instance);
    partial void Updatereport_group(report_group instance);
    partial void Deletereport_group(report_group instance);
    partial void Insertreport(report instance);
    partial void Updatereport(report instance);
    partial void Deletereport(report instance);
    partial void Insertrole_action(role_action instance);
    partial void Updaterole_action(role_action instance);
    partial void Deleterole_action(role_action instance);
    partial void Insertrole_profile(role_profile instance);
    partial void Updaterole_profile(role_profile instance);
    partial void Deleterole_profile(role_profile instance);
    partial void Insertrole(role instance);
    partial void Updaterole(role instance);
    partial void Deleterole(role instance);
    partial void Inserttask_issue(task_issue instance);
    partial void Updatetask_issue(task_issue instance);
    partial void Deletetask_issue(task_issue instance);
    partial void Inserttask_type(task_type instance);
    partial void Updatetask_type(task_type instance);
    partial void Deletetask_type(task_type instance);
    partial void Inserttask(task instance);
    partial void Updatetask(task instance);
    partial void Deletetask(task instance);
    partial void Insertteam_barrier(team_barrier instance);
    partial void Updateteam_barrier(team_barrier instance);
    partial void Deleteteam_barrier(team_barrier instance);
    partial void Insertteam_org_code(team_org_code instance);
    partial void Updateteam_org_code(team_org_code instance);
    partial void Deleteteam_org_code(team_org_code instance);
    partial void Insertteam_profile(team_profile instance);
    partial void Updateteam_profile(team_profile instance);
    partial void Deleteteam_profile(team_profile instance);
    partial void Insertteam_task_type(team_task_type instance);
    partial void Updateteam_task_type(team_task_type instance);
    partial void Deleteteam_task_type(team_task_type instance);
    partial void Insertteam_unplanned_code(team_unplanned_code instance);
    partial void Updateteam_unplanned_code(team_unplanned_code instance);
    partial void Deleteteam_unplanned_code(team_unplanned_code instance);
    partial void Insertteam(team instance);
    partial void Updateteam(team instance);
    partial void Deleteteam(team instance);
    partial void Insertunplanned_code(unplanned_code instance);
    partial void Updateunplanned_code(unplanned_code instance);
    partial void Deleteunplanned_code(unplanned_code instance);
    partial void Insertunplanned_codes_description(unplanned_codes_description instance);
    partial void Updateunplanned_codes_description(unplanned_codes_description instance);
    partial void Deleteunplanned_codes_description(unplanned_codes_description instance);
    partial void Insertweekly_plan(weekly_plan instance);
    partial void Updateweekly_plan(weekly_plan instance);
    partial void Deleteweekly_plan(weekly_plan instance);
    partial void Insertweekly_plan_leave(weekly_plan_leave instance);
    partial void Updateweekly_plan_leave(weekly_plan_leave instance);
    partial void Deleteweekly_plan_leave(weekly_plan_leave instance);
    partial void Insertweekly_task_barrier_hour(weekly_task_barrier_hour instance);
    partial void Updateweekly_task_barrier_hour(weekly_task_barrier_hour instance);
    partial void Deleteweekly_task_barrier_hour(weekly_task_barrier_hour instance);
    partial void Insertweekly_task_barrier(weekly_task_barrier instance);
    partial void Updateweekly_task_barrier(weekly_task_barrier instance);
    partial void Deleteweekly_task_barrier(weekly_task_barrier instance);
    partial void Insertweekly_task_hour(weekly_task_hour instance);
    partial void Updateweekly_task_hour(weekly_task_hour instance);
    partial void Deleteweekly_task_hour(weekly_task_hour instance);
    #endregion
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<action> actions
		{
			get
			{
				return this.GetTable<action>();
			}
		}
		
		public System.Data.Linq.Table<weekly_task> weekly_tasks
		{
			get
			{
				return this.GetTable<weekly_task>();
			}
		}
		
		public System.Data.Linq.Table<alert> alerts
		{
			get
			{
				return this.GetTable<alert>();
			}
		}
		
		public System.Data.Linq.Table<barrier> barriers
		{
			get
			{
				return this.GetTable<barrier>();
			}
		}
		
		public System.Data.Linq.Table<barriers_description> barriers_descriptions
		{
			get
			{
				return this.GetTable<barriers_description>();
			}
		}
		
		public System.Data.Linq.Table<complexity> complexities
		{
			get
			{
				return this.GetTable<complexity>();
			}
		}
		
		public System.Data.Linq.Table<favorite_plan_hour> favorite_plan_hours
		{
			get
			{
				return this.GetTable<favorite_plan_hour>();
			}
		}
		
		public System.Data.Linq.Table<favorite> favorites
		{
			get
			{
				return this.GetTable<favorite>();
			}
		}
		
		public System.Data.Linq.Table<log> logs
		{
			get
			{
				return this.GetTable<log>();
			}
		}
		
		public System.Data.Linq.Table<patch> patches
		{
			get
			{
				return this.GetTable<patch>();
			}
		}
		
		public System.Data.Linq.Table<preference> preferences
		{
			get
			{
				return this.GetTable<preference>();
			}
		}
		
		public System.Data.Linq.Table<profile_log> profile_logs
		{
			get
			{
				return this.GetTable<profile_log>();
			}
		}
		
		public System.Data.Linq.Table<profile> profiles
		{
			get
			{
				return this.GetTable<profile>();
			}
		}
		
		public System.Data.Linq.Table<program> programs
		{
			get
			{
				return this.GetTable<program>();
			}
		}
		
		public System.Data.Linq.Table<report_group_group> report_group_groups
		{
			get
			{
				return this.GetTable<report_group_group>();
			}
		}
		
		public System.Data.Linq.Table<report_group_profile> report_group_profiles
		{
			get
			{
				return this.GetTable<report_group_profile>();
			}
		}
		
		public System.Data.Linq.Table<report_group_team> report_group_teams
		{
			get
			{
				return this.GetTable<report_group_team>();
			}
		}
		
		public System.Data.Linq.Table<report_group> report_groups
		{
			get
			{
				return this.GetTable<report_group>();
			}
		}
		
		public System.Data.Linq.Table<report> reports
		{
			get
			{
				return this.GetTable<report>();
			}
		}
		
		public System.Data.Linq.Table<role_action> role_actions
		{
			get
			{
				return this.GetTable<role_action>();
			}
		}
		
		public System.Data.Linq.Table<role_profile> role_profiles
		{
			get
			{
				return this.GetTable<role_profile>();
			}
		}
		
		public System.Data.Linq.Table<role> roles
		{
			get
			{
				return this.GetTable<role>();
			}
		}
		
		public System.Data.Linq.Table<task_issue> task_issues
		{
			get
			{
				return this.GetTable<task_issue>();
			}
		}
		
		public System.Data.Linq.Table<task_type> task_types
		{
			get
			{
				return this.GetTable<task_type>();
			}
		}
		
		public System.Data.Linq.Table<task> tasks
		{
			get
			{
				return this.GetTable<task>();
			}
		}
		
		public System.Data.Linq.Table<team_barrier> team_barriers
		{
			get
			{
				return this.GetTable<team_barrier>();
			}
		}
		
		public System.Data.Linq.Table<team_org_code> team_org_codes
		{
			get
			{
				return this.GetTable<team_org_code>();
			}
		}
		
		public System.Data.Linq.Table<team_profile> team_profiles
		{
			get
			{
				return this.GetTable<team_profile>();
			}
		}
		
		public System.Data.Linq.Table<team_task_type> team_task_types
		{
			get
			{
				return this.GetTable<team_task_type>();
			}
		}
		
		public System.Data.Linq.Table<team_unplanned_code> team_unplanned_codes
		{
			get
			{
				return this.GetTable<team_unplanned_code>();
			}
		}
		
		public System.Data.Linq.Table<team> teams
		{
			get
			{
				return this.GetTable<team>();
			}
		}
		
		public System.Data.Linq.Table<unplanned_code> unplanned_codes
		{
			get
			{
				return this.GetTable<unplanned_code>();
			}
		}
		
		public System.Data.Linq.Table<unplanned_codes_description> unplanned_codes_descriptions
		{
			get
			{
				return this.GetTable<unplanned_codes_description>();
			}
		}
		
		public System.Data.Linq.Table<weekly_plan> weekly_plans
		{
			get
			{
				return this.GetTable<weekly_plan>();
			}
		}
		
		public System.Data.Linq.Table<weekly_plan_leave> weekly_plan_leaves
		{
			get
			{
				return this.GetTable<weekly_plan_leave>();
			}
		}
		
		public System.Data.Linq.Table<weekly_task_barrier_hour> weekly_task_barrier_hours
		{
			get
			{
				return this.GetTable<weekly_task_barrier_hour>();
			}
		}
		
		public System.Data.Linq.Table<weekly_task_barrier> weekly_task_barriers
		{
			get
			{
				return this.GetTable<weekly_task_barrier>();
			}
		}
		
		public System.Data.Linq.Table<weekly_task_hour> weekly_task_hours
		{
			get
			{
				return this.GetTable<weekly_task_hour>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.actions")]
	public partial class action : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _title;
		
		private EntitySet<role_action> _role_actions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    #endregion
		
		public action()
		{
			this._role_actions = new EntitySet<role_action>(new Action<role_action>(this.attach_role_actions), new Action<role_action>(this.detach_role_actions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="action_role_action", Storage="_role_actions", ThisKey="id", OtherKey="action_id")]
		public EntitySet<role_action> role_actions
		{
			get
			{
				return this._role_actions;
			}
			set
			{
				this._role_actions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_role_actions(role_action entity)
		{
			this.SendPropertyChanging();
			entity.action = this;
		}
		
		private void detach_role_actions(role_action entity)
		{
			this.SendPropertyChanging();
			entity.action = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.weekly_tasks")]
	public partial class weekly_task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _weekly_plan_id;
		
		private long _task_id;
		
		private bool _unplanned;
		
		private System.Nullable<long> _unplanned_code_id;
		
		private string _comment;
		
		private System.Nullable<int> _plan_day_complete;
		
		private System.Nullable<int> _actual_day_complete;
		
		private EntitySet<weekly_task_barrier> _weekly_task_barriers;
		
		private EntitySet<weekly_task_hour> _weekly_task_hours;
		
		private EntityRef<task> _task;
		
		private EntityRef<unplanned_code> _unplanned_code;
		
		private EntityRef<weekly_plan> _weekly_plan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onweekly_plan_idChanging(long value);
    partial void Onweekly_plan_idChanged();
    partial void Ontask_idChanging(long value);
    partial void Ontask_idChanged();
    partial void OnunplannedChanging(bool value);
    partial void OnunplannedChanged();
    partial void Onunplanned_code_idChanging(System.Nullable<long> value);
    partial void Onunplanned_code_idChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void Onplan_day_completeChanging(System.Nullable<int> value);
    partial void Onplan_day_completeChanged();
    partial void Onactual_day_completeChanging(System.Nullable<int> value);
    partial void Onactual_day_completeChanged();
    #endregion
		
		public weekly_task()
		{
			this._weekly_task_barriers = new EntitySet<weekly_task_barrier>(new Action<weekly_task_barrier>(this.attach_weekly_task_barriers), new Action<weekly_task_barrier>(this.detach_weekly_task_barriers));
			this._weekly_task_hours = new EntitySet<weekly_task_hour>(new Action<weekly_task_hour>(this.attach_weekly_task_hours), new Action<weekly_task_hour>(this.detach_weekly_task_hours));
			this._task = default(EntityRef<task>);
			this._unplanned_code = default(EntityRef<unplanned_code>);
			this._weekly_plan = default(EntityRef<weekly_plan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weekly_plan_id", DbType="BigInt NOT NULL")]
		public long weekly_plan_id
		{
			get
			{
				return this._weekly_plan_id;
			}
			set
			{
				if ((this._weekly_plan_id != value))
				{
					if (this._weekly_plan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onweekly_plan_idChanging(value);
					this.SendPropertyChanging();
					this._weekly_plan_id = value;
					this.SendPropertyChanged("weekly_plan_id");
					this.Onweekly_plan_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_task_id", DbType="BigInt NOT NULL")]
		public long task_id
		{
			get
			{
				return this._task_id;
			}
			set
			{
				if ((this._task_id != value))
				{
					if (this._task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontask_idChanging(value);
					this.SendPropertyChanging();
					this._task_id = value;
					this.SendPropertyChanged("task_id");
					this.Ontask_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unplanned", DbType="Bit NOT NULL")]
		public bool unplanned
		{
			get
			{
				return this._unplanned;
			}
			set
			{
				if ((this._unplanned != value))
				{
					this.OnunplannedChanging(value);
					this.SendPropertyChanging();
					this._unplanned = value;
					this.SendPropertyChanged("unplanned");
					this.OnunplannedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unplanned_code_id", DbType="BigInt")]
		public System.Nullable<long> unplanned_code_id
		{
			get
			{
				return this._unplanned_code_id;
			}
			set
			{
				if ((this._unplanned_code_id != value))
				{
					if (this._unplanned_code.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onunplanned_code_idChanging(value);
					this.SendPropertyChanging();
					this._unplanned_code_id = value;
					this.SendPropertyChanged("unplanned_code_id");
					this.Onunplanned_code_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_plan_day_complete", DbType="Int")]
		public System.Nullable<int> plan_day_complete
		{
			get
			{
				return this._plan_day_complete;
			}
			set
			{
				if ((this._plan_day_complete != value))
				{
					this.Onplan_day_completeChanging(value);
					this.SendPropertyChanging();
					this._plan_day_complete = value;
					this.SendPropertyChanged("plan_day_complete");
					this.Onplan_day_completeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_actual_day_complete", DbType="Int")]
		public System.Nullable<int> actual_day_complete
		{
			get
			{
				return this._actual_day_complete;
			}
			set
			{
				if ((this._actual_day_complete != value))
				{
					this.Onactual_day_completeChanging(value);
					this.SendPropertyChanging();
					this._actual_day_complete = value;
					this.SendPropertyChanged("actual_day_complete");
					this.Onactual_day_completeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weekly_task_weekly_task_barrier", Storage="_weekly_task_barriers", ThisKey="id", OtherKey="weekly_task_id")]
		public EntitySet<weekly_task_barrier> weekly_task_barriers
		{
			get
			{
				return this._weekly_task_barriers;
			}
			set
			{
				this._weekly_task_barriers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weekly_task_weekly_task_hour", Storage="_weekly_task_hours", ThisKey="id", OtherKey="weekly_task_id")]
		public EntitySet<weekly_task_hour> weekly_task_hours
		{
			get
			{
				return this._weekly_task_hours;
			}
			set
			{
				this._weekly_task_hours.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_weekly_task", Storage="_task", ThisKey="task_id", OtherKey="id", IsForeignKey=true)]
		public task task
		{
			get
			{
				return this._task.Entity;
			}
			set
			{
				task previousValue = this._task.Entity;
				if (((previousValue != value) 
							|| (this._task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._task.Entity = null;
						previousValue.weekly_tasks.Remove(this);
					}
					this._task.Entity = value;
					if ((value != null))
					{
						value.weekly_tasks.Add(this);
						this._task_id = value.id;
					}
					else
					{
						this._task_id = default(long);
					}
					this.SendPropertyChanged("task");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="unplanned_code_weekly_task", Storage="_unplanned_code", ThisKey="unplanned_code_id", OtherKey="id", IsForeignKey=true)]
		public unplanned_code unplanned_code
		{
			get
			{
				return this._unplanned_code.Entity;
			}
			set
			{
				unplanned_code previousValue = this._unplanned_code.Entity;
				if (((previousValue != value) 
							|| (this._unplanned_code.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._unplanned_code.Entity = null;
						previousValue.weekly_tasks.Remove(this);
					}
					this._unplanned_code.Entity = value;
					if ((value != null))
					{
						value.weekly_tasks.Add(this);
						this._unplanned_code_id = value.id;
					}
					else
					{
						this._unplanned_code_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("unplanned_code");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weekly_plan_weekly_task", Storage="_weekly_plan", ThisKey="weekly_plan_id", OtherKey="id", IsForeignKey=true)]
		public weekly_plan weekly_plan
		{
			get
			{
				return this._weekly_plan.Entity;
			}
			set
			{
				weekly_plan previousValue = this._weekly_plan.Entity;
				if (((previousValue != value) 
							|| (this._weekly_plan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._weekly_plan.Entity = null;
						previousValue.weekly_tasks.Remove(this);
					}
					this._weekly_plan.Entity = value;
					if ((value != null))
					{
						value.weekly_tasks.Add(this);
						this._weekly_plan_id = value.id;
					}
					else
					{
						this._weekly_plan_id = default(long);
					}
					this.SendPropertyChanged("weekly_plan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_weekly_task_barriers(weekly_task_barrier entity)
		{
			this.SendPropertyChanging();
			entity.weekly_task = this;
		}
		
		private void detach_weekly_task_barriers(weekly_task_barrier entity)
		{
			this.SendPropertyChanging();
			entity.weekly_task = null;
		}
		
		private void attach_weekly_task_hours(weekly_task_hour entity)
		{
			this.SendPropertyChanging();
			entity.weekly_task = this;
		}
		
		private void detach_weekly_task_hours(weekly_task_hour entity)
		{
			this.SendPropertyChanging();
			entity.weekly_task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.alerts")]
	public partial class alert : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _profile_id;
		
		private long _creator_id;
		
		private System.DateTime _entry_date;
		
		private string _subject;
		
		private string _message;
		
		private System.Nullable<long> _linked_id;
		
		private string _linked_type;
		
		private bool _acknowledged;
		
		private EntityRef<profile> _profile;
		
		private EntityRef<profile> _profile1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onprofile_idChanging(long value);
    partial void Onprofile_idChanged();
    partial void Oncreator_idChanging(long value);
    partial void Oncreator_idChanged();
    partial void Onentry_dateChanging(System.DateTime value);
    partial void Onentry_dateChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    partial void Onlinked_idChanging(System.Nullable<long> value);
    partial void Onlinked_idChanged();
    partial void Onlinked_typeChanging(string value);
    partial void Onlinked_typeChanged();
    partial void OnacknowledgedChanging(bool value);
    partial void OnacknowledgedChanged();
    #endregion
		
		public alert()
		{
			this._profile = default(EntityRef<profile>);
			this._profile1 = default(EntityRef<profile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profile_id", DbType="BigInt NOT NULL")]
		public long profile_id
		{
			get
			{
				return this._profile_id;
			}
			set
			{
				if ((this._profile_id != value))
				{
					if (this._profile1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprofile_idChanging(value);
					this.SendPropertyChanging();
					this._profile_id = value;
					this.SendPropertyChanged("profile_id");
					this.Onprofile_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creator_id", DbType="BigInt NOT NULL")]
		public long creator_id
		{
			get
			{
				return this._creator_id;
			}
			set
			{
				if ((this._creator_id != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncreator_idChanging(value);
					this.SendPropertyChanging();
					this._creator_id = value;
					this.SendPropertyChanged("creator_id");
					this.Oncreator_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entry_date", DbType="DateTime NOT NULL")]
		public System.DateTime entry_date
		{
			get
			{
				return this._entry_date;
			}
			set
			{
				if ((this._entry_date != value))
				{
					this.Onentry_dateChanging(value);
					this.SendPropertyChanging();
					this._entry_date = value;
					this.SendPropertyChanged("entry_date");
					this.Onentry_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_linked_id", DbType="BigInt")]
		public System.Nullable<long> linked_id
		{
			get
			{
				return this._linked_id;
			}
			set
			{
				if ((this._linked_id != value))
				{
					this.Onlinked_idChanging(value);
					this.SendPropertyChanging();
					this._linked_id = value;
					this.SendPropertyChanged("linked_id");
					this.Onlinked_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_linked_type", DbType="VarChar(16)")]
		public string linked_type
		{
			get
			{
				return this._linked_type;
			}
			set
			{
				if ((this._linked_type != value))
				{
					this.Onlinked_typeChanging(value);
					this.SendPropertyChanging();
					this._linked_type = value;
					this.SendPropertyChanged("linked_type");
					this.Onlinked_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acknowledged", DbType="Bit NOT NULL")]
		public bool acknowledged
		{
			get
			{
				return this._acknowledged;
			}
			set
			{
				if ((this._acknowledged != value))
				{
					this.OnacknowledgedChanging(value);
					this.SendPropertyChanging();
					this._acknowledged = value;
					this.SendPropertyChanged("acknowledged");
					this.OnacknowledgedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_alert", Storage="_profile", ThisKey="creator_id", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.alerts.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.alerts.Add(this);
						this._creator_id = value.id;
					}
					else
					{
						this._creator_id = default(long);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_alert1", Storage="_profile1", ThisKey="profile_id", OtherKey="id", IsForeignKey=true)]
		public profile profile1
		{
			get
			{
				return this._profile1.Entity;
			}
			set
			{
				profile previousValue = this._profile1.Entity;
				if (((previousValue != value) 
							|| (this._profile1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile1.Entity = null;
						previousValue.alerts1.Remove(this);
					}
					this._profile1.Entity = value;
					if ((value != null))
					{
						value.alerts1.Add(this);
						this._profile_id = value.id;
					}
					else
					{
						this._profile_id = default(long);
					}
					this.SendPropertyChanged("profile1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.barriers")]
	public partial class barrier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _team_id;
		
		private System.Nullable<long> _parent_id;
		
		private string _code;
		
		private string _title;
		
		private string _description;
		
		private bool _active;
		
		private EntitySet<barrier> _barriers;
		
		private EntitySet<barriers_description> _barriers_descriptions;
		
		private EntitySet<team_barrier> _team_barriers;
		
		private EntitySet<weekly_task_barrier> _weekly_task_barriers;
		
		private EntityRef<barrier> _barrier1;
		
		private EntityRef<team> _team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onteam_idChanging(long value);
    partial void Onteam_idChanged();
    partial void Onparent_idChanging(System.Nullable<long> value);
    partial void Onparent_idChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
		
		public barrier()
		{
			this._barriers = new EntitySet<barrier>(new Action<barrier>(this.attach_barriers), new Action<barrier>(this.detach_barriers));
			this._barriers_descriptions = new EntitySet<barriers_description>(new Action<barriers_description>(this.attach_barriers_descriptions), new Action<barriers_description>(this.detach_barriers_descriptions));
			this._team_barriers = new EntitySet<team_barrier>(new Action<team_barrier>(this.attach_team_barriers), new Action<team_barrier>(this.detach_team_barriers));
			this._weekly_task_barriers = new EntitySet<weekly_task_barrier>(new Action<weekly_task_barrier>(this.attach_weekly_task_barriers), new Action<weekly_task_barrier>(this.detach_weekly_task_barriers));
			this._barrier1 = default(EntityRef<barrier>);
			this._team = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_id", DbType="BigInt NOT NULL")]
		public long team_id
		{
			get
			{
				return this._team_id;
			}
			set
			{
				if ((this._team_id != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam_idChanging(value);
					this.SendPropertyChanging();
					this._team_id = value;
					this.SendPropertyChanged("team_id");
					this.Onteam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parent_id", DbType="BigInt")]
		public System.Nullable<long> parent_id
		{
			get
			{
				return this._parent_id;
			}
			set
			{
				if ((this._parent_id != value))
				{
					if (this._barrier1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onparent_idChanging(value);
					this.SendPropertyChanging();
					this._parent_id = value;
					this.SendPropertyChanged("parent_id");
					this.Onparent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="barrier_barrier", Storage="_barriers", ThisKey="id", OtherKey="parent_id")]
		public EntitySet<barrier> barriers
		{
			get
			{
				return this._barriers;
			}
			set
			{
				this._barriers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="barrier_barriers_description", Storage="_barriers_descriptions", ThisKey="id", OtherKey="barrier_id")]
		public EntitySet<barriers_description> barriers_descriptions
		{
			get
			{
				return this._barriers_descriptions;
			}
			set
			{
				this._barriers_descriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="barrier_team_barrier", Storage="_team_barriers", ThisKey="id", OtherKey="barrier_id")]
		public EntitySet<team_barrier> team_barriers
		{
			get
			{
				return this._team_barriers;
			}
			set
			{
				this._team_barriers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="barrier_weekly_task_barrier", Storage="_weekly_task_barriers", ThisKey="id", OtherKey="barrier_id")]
		public EntitySet<weekly_task_barrier> weekly_task_barriers
		{
			get
			{
				return this._weekly_task_barriers;
			}
			set
			{
				this._weekly_task_barriers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="barrier_barrier", Storage="_barrier1", ThisKey="parent_id", OtherKey="id", IsForeignKey=true)]
		public barrier barrier1
		{
			get
			{
				return this._barrier1.Entity;
			}
			set
			{
				barrier previousValue = this._barrier1.Entity;
				if (((previousValue != value) 
							|| (this._barrier1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._barrier1.Entity = null;
						previousValue.barriers.Remove(this);
					}
					this._barrier1.Entity = value;
					if ((value != null))
					{
						value.barriers.Add(this);
						this._parent_id = value.id;
					}
					else
					{
						this._parent_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("barrier1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_barrier", Storage="_team", ThisKey="team_id", OtherKey="id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.barriers.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.barriers.Add(this);
						this._team_id = value.id;
					}
					else
					{
						this._team_id = default(long);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_barriers(barrier entity)
		{
			this.SendPropertyChanging();
			entity.barrier1 = this;
		}
		
		private void detach_barriers(barrier entity)
		{
			this.SendPropertyChanging();
			entity.barrier1 = null;
		}
		
		private void attach_barriers_descriptions(barriers_description entity)
		{
			this.SendPropertyChanging();
			entity.barrier = this;
		}
		
		private void detach_barriers_descriptions(barriers_description entity)
		{
			this.SendPropertyChanging();
			entity.barrier = null;
		}
		
		private void attach_team_barriers(team_barrier entity)
		{
			this.SendPropertyChanging();
			entity.barrier = this;
		}
		
		private void detach_team_barriers(team_barrier entity)
		{
			this.SendPropertyChanging();
			entity.barrier = null;
		}
		
		private void attach_weekly_task_barriers(weekly_task_barrier entity)
		{
			this.SendPropertyChanging();
			entity.barrier = this;
		}
		
		private void detach_weekly_task_barriers(weekly_task_barrier entity)
		{
			this.SendPropertyChanging();
			entity.barrier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.barriers_descriptions")]
	public partial class barriers_description : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _team_id;
		
		private long _barrier_id;
		
		private string _description;
		
		private EntityRef<barrier> _barrier;
		
		private EntityRef<team> _team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onteam_idChanging(long value);
    partial void Onteam_idChanged();
    partial void Onbarrier_idChanging(long value);
    partial void Onbarrier_idChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public barriers_description()
		{
			this._barrier = default(EntityRef<barrier>);
			this._team = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long team_id
		{
			get
			{
				return this._team_id;
			}
			set
			{
				if ((this._team_id != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam_idChanging(value);
					this.SendPropertyChanging();
					this._team_id = value;
					this.SendPropertyChanged("team_id");
					this.Onteam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_barrier_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long barrier_id
		{
			get
			{
				return this._barrier_id;
			}
			set
			{
				if ((this._barrier_id != value))
				{
					if (this._barrier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onbarrier_idChanging(value);
					this.SendPropertyChanging();
					this._barrier_id = value;
					this.SendPropertyChanged("barrier_id");
					this.Onbarrier_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="barrier_barriers_description", Storage="_barrier", ThisKey="barrier_id", OtherKey="id", IsForeignKey=true)]
		public barrier barrier
		{
			get
			{
				return this._barrier.Entity;
			}
			set
			{
				barrier previousValue = this._barrier.Entity;
				if (((previousValue != value) 
							|| (this._barrier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._barrier.Entity = null;
						previousValue.barriers_descriptions.Remove(this);
					}
					this._barrier.Entity = value;
					if ((value != null))
					{
						value.barriers_descriptions.Add(this);
						this._barrier_id = value.id;
					}
					else
					{
						this._barrier_id = default(long);
					}
					this.SendPropertyChanged("barrier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_barriers_description", Storage="_team", ThisKey="team_id", OtherKey="id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.barriers_descriptions.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.barriers_descriptions.Add(this);
						this._team_id = value.id;
					}
					else
					{
						this._team_id = default(long);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.complexities")]
	public partial class complexity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _team_id;
		
		private long _task_type_id;
		
		private string _title;
		
		private bool _active;
		
		private double _hours;
		
		private int _sort_order;
		
		private EntitySet<favorite> _favorites;
		
		private EntitySet<task> _tasks;
		
		private EntityRef<task_type> _task_type;
		
		private EntityRef<team> _team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onteam_idChanging(long value);
    partial void Onteam_idChanged();
    partial void Ontask_type_idChanging(long value);
    partial void Ontask_type_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnhoursChanging(double value);
    partial void OnhoursChanged();
    partial void Onsort_orderChanging(int value);
    partial void Onsort_orderChanged();
    #endregion
		
		public complexity()
		{
			this._favorites = new EntitySet<favorite>(new Action<favorite>(this.attach_favorites), new Action<favorite>(this.detach_favorites));
			this._tasks = new EntitySet<task>(new Action<task>(this.attach_tasks), new Action<task>(this.detach_tasks));
			this._task_type = default(EntityRef<task_type>);
			this._team = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_id", DbType="BigInt NOT NULL")]
		public long team_id
		{
			get
			{
				return this._team_id;
			}
			set
			{
				if ((this._team_id != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam_idChanging(value);
					this.SendPropertyChanging();
					this._team_id = value;
					this.SendPropertyChanged("team_id");
					this.Onteam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_task_type_id", DbType="BigInt NOT NULL")]
		public long task_type_id
		{
			get
			{
				return this._task_type_id;
			}
			set
			{
				if ((this._task_type_id != value))
				{
					if (this._task_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontask_type_idChanging(value);
					this.SendPropertyChanging();
					this._task_type_id = value;
					this.SendPropertyChanged("task_type_id");
					this.Ontask_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hours", DbType="Float NOT NULL")]
		public double hours
		{
			get
			{
				return this._hours;
			}
			set
			{
				if ((this._hours != value))
				{
					this.OnhoursChanging(value);
					this.SendPropertyChanging();
					this._hours = value;
					this.SendPropertyChanged("hours");
					this.OnhoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort_order", DbType="Int NOT NULL")]
		public int sort_order
		{
			get
			{
				return this._sort_order;
			}
			set
			{
				if ((this._sort_order != value))
				{
					this.Onsort_orderChanging(value);
					this.SendPropertyChanging();
					this._sort_order = value;
					this.SendPropertyChanged("sort_order");
					this.Onsort_orderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="complexity_favorite", Storage="_favorites", ThisKey="id", OtherKey="complexity_id")]
		public EntitySet<favorite> favorites
		{
			get
			{
				return this._favorites;
			}
			set
			{
				this._favorites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="complexity_task", Storage="_tasks", ThisKey="id", OtherKey="complexity_id")]
		public EntitySet<task> tasks
		{
			get
			{
				return this._tasks;
			}
			set
			{
				this._tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_type_complexity", Storage="_task_type", ThisKey="task_type_id", OtherKey="id", IsForeignKey=true)]
		public task_type task_type
		{
			get
			{
				return this._task_type.Entity;
			}
			set
			{
				task_type previousValue = this._task_type.Entity;
				if (((previousValue != value) 
							|| (this._task_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._task_type.Entity = null;
						previousValue.complexities.Remove(this);
					}
					this._task_type.Entity = value;
					if ((value != null))
					{
						value.complexities.Add(this);
						this._task_type_id = value.id;
					}
					else
					{
						this._task_type_id = default(long);
					}
					this.SendPropertyChanged("task_type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_complexity", Storage="_team", ThisKey="team_id", OtherKey="id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.complexities.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.complexities.Add(this);
						this._team_id = value.id;
					}
					else
					{
						this._team_id = default(long);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_favorites(favorite entity)
		{
			this.SendPropertyChanging();
			entity.complexity = this;
		}
		
		private void detach_favorites(favorite entity)
		{
			this.SendPropertyChanging();
			entity.complexity = null;
		}
		
		private void attach_tasks(task entity)
		{
			this.SendPropertyChanging();
			entity.complexity = this;
		}
		
		private void detach_tasks(task entity)
		{
			this.SendPropertyChanging();
			entity.complexity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.favorite_plan_hours")]
	public partial class favorite_plan_hour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _favorite_id;
		
		private int _day_of_week;
		
		private double _hours;
		
		private EntityRef<favorite> _favorite;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onfavorite_idChanging(long value);
    partial void Onfavorite_idChanged();
    partial void Onday_of_weekChanging(int value);
    partial void Onday_of_weekChanged();
    partial void OnhoursChanging(double value);
    partial void OnhoursChanged();
    #endregion
		
		public favorite_plan_hour()
		{
			this._favorite = default(EntityRef<favorite>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_favorite_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long favorite_id
		{
			get
			{
				return this._favorite_id;
			}
			set
			{
				if ((this._favorite_id != value))
				{
					if (this._favorite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfavorite_idChanging(value);
					this.SendPropertyChanging();
					this._favorite_id = value;
					this.SendPropertyChanged("favorite_id");
					this.Onfavorite_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_day_of_week", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int day_of_week
		{
			get
			{
				return this._day_of_week;
			}
			set
			{
				if ((this._day_of_week != value))
				{
					this.Onday_of_weekChanging(value);
					this.SendPropertyChanging();
					this._day_of_week = value;
					this.SendPropertyChanged("day_of_week");
					this.Onday_of_weekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hours", DbType="Float NOT NULL")]
		public double hours
		{
			get
			{
				return this._hours;
			}
			set
			{
				if ((this._hours != value))
				{
					this.OnhoursChanging(value);
					this.SendPropertyChanging();
					this._hours = value;
					this.SendPropertyChanged("hours");
					this.OnhoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="favorite_favorite_plan_hour", Storage="_favorite", ThisKey="favorite_id", OtherKey="id", IsForeignKey=true)]
		public favorite favorite
		{
			get
			{
				return this._favorite.Entity;
			}
			set
			{
				favorite previousValue = this._favorite.Entity;
				if (((previousValue != value) 
							|| (this._favorite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._favorite.Entity = null;
						previousValue.favorite_plan_hours.Remove(this);
					}
					this._favorite.Entity = value;
					if ((value != null))
					{
						value.favorite_plan_hours.Add(this);
						this._favorite_id = value.id;
					}
					else
					{
						this._favorite_id = default(long);
					}
					this.SendPropertyChanged("favorite");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.favorites")]
	public partial class favorite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _profile_id;
		
		private System.Nullable<long> _program_id;
		
		private System.Nullable<long> _complexity_id;
		
		private System.Nullable<long> _task_type_id;
		
		private string _title;
		
		private System.Nullable<double> _hours;
		
		private System.Nullable<double> _estimate;
		
		private bool _template;
		
		private EntitySet<favorite_plan_hour> _favorite_plan_hours;
		
		private EntityRef<complexity> _complexity;
		
		private EntityRef<profile> _profile;
		
		private EntityRef<program> _program;
		
		private EntityRef<task_type> _task_type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onprofile_idChanging(long value);
    partial void Onprofile_idChanged();
    partial void Onprogram_idChanging(System.Nullable<long> value);
    partial void Onprogram_idChanged();
    partial void Oncomplexity_idChanging(System.Nullable<long> value);
    partial void Oncomplexity_idChanged();
    partial void Ontask_type_idChanging(System.Nullable<long> value);
    partial void Ontask_type_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnhoursChanging(System.Nullable<double> value);
    partial void OnhoursChanged();
    partial void OnestimateChanging(System.Nullable<double> value);
    partial void OnestimateChanged();
    partial void OntemplateChanging(bool value);
    partial void OntemplateChanged();
    #endregion
		
		public favorite()
		{
			this._favorite_plan_hours = new EntitySet<favorite_plan_hour>(new Action<favorite_plan_hour>(this.attach_favorite_plan_hours), new Action<favorite_plan_hour>(this.detach_favorite_plan_hours));
			this._complexity = default(EntityRef<complexity>);
			this._profile = default(EntityRef<profile>);
			this._program = default(EntityRef<program>);
			this._task_type = default(EntityRef<task_type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profile_id", DbType="BigInt NOT NULL")]
		public long profile_id
		{
			get
			{
				return this._profile_id;
			}
			set
			{
				if ((this._profile_id != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprofile_idChanging(value);
					this.SendPropertyChanging();
					this._profile_id = value;
					this.SendPropertyChanged("profile_id");
					this.Onprofile_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_program_id", DbType="BigInt")]
		public System.Nullable<long> program_id
		{
			get
			{
				return this._program_id;
			}
			set
			{
				if ((this._program_id != value))
				{
					if (this._program.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprogram_idChanging(value);
					this.SendPropertyChanging();
					this._program_id = value;
					this.SendPropertyChanged("program_id");
					this.Onprogram_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_complexity_id", DbType="BigInt")]
		public System.Nullable<long> complexity_id
		{
			get
			{
				return this._complexity_id;
			}
			set
			{
				if ((this._complexity_id != value))
				{
					if (this._complexity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncomplexity_idChanging(value);
					this.SendPropertyChanging();
					this._complexity_id = value;
					this.SendPropertyChanged("complexity_id");
					this.Oncomplexity_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_task_type_id", DbType="BigInt")]
		public System.Nullable<long> task_type_id
		{
			get
			{
				return this._task_type_id;
			}
			set
			{
				if ((this._task_type_id != value))
				{
					if (this._task_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontask_type_idChanging(value);
					this.SendPropertyChanging();
					this._task_type_id = value;
					this.SendPropertyChanged("task_type_id");
					this.Ontask_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hours", DbType="Float")]
		public System.Nullable<double> hours
		{
			get
			{
				return this._hours;
			}
			set
			{
				if ((this._hours != value))
				{
					this.OnhoursChanging(value);
					this.SendPropertyChanging();
					this._hours = value;
					this.SendPropertyChanged("hours");
					this.OnhoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_estimate", DbType="Float")]
		public System.Nullable<double> estimate
		{
			get
			{
				return this._estimate;
			}
			set
			{
				if ((this._estimate != value))
				{
					this.OnestimateChanging(value);
					this.SendPropertyChanging();
					this._estimate = value;
					this.SendPropertyChanged("estimate");
					this.OnestimateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_template", DbType="Bit NOT NULL")]
		public bool template
		{
			get
			{
				return this._template;
			}
			set
			{
				if ((this._template != value))
				{
					this.OntemplateChanging(value);
					this.SendPropertyChanging();
					this._template = value;
					this.SendPropertyChanged("template");
					this.OntemplateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="favorite_favorite_plan_hour", Storage="_favorite_plan_hours", ThisKey="id", OtherKey="favorite_id")]
		public EntitySet<favorite_plan_hour> favorite_plan_hours
		{
			get
			{
				return this._favorite_plan_hours;
			}
			set
			{
				this._favorite_plan_hours.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="complexity_favorite", Storage="_complexity", ThisKey="complexity_id", OtherKey="id", IsForeignKey=true)]
		public complexity complexity
		{
			get
			{
				return this._complexity.Entity;
			}
			set
			{
				complexity previousValue = this._complexity.Entity;
				if (((previousValue != value) 
							|| (this._complexity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._complexity.Entity = null;
						previousValue.favorites.Remove(this);
					}
					this._complexity.Entity = value;
					if ((value != null))
					{
						value.favorites.Add(this);
						this._complexity_id = value.id;
					}
					else
					{
						this._complexity_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("complexity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_favorite", Storage="_profile", ThisKey="profile_id", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.favorites.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.favorites.Add(this);
						this._profile_id = value.id;
					}
					else
					{
						this._profile_id = default(long);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="program_favorite", Storage="_program", ThisKey="program_id", OtherKey="id", IsForeignKey=true)]
		public program program
		{
			get
			{
				return this._program.Entity;
			}
			set
			{
				program previousValue = this._program.Entity;
				if (((previousValue != value) 
							|| (this._program.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._program.Entity = null;
						previousValue.favorites.Remove(this);
					}
					this._program.Entity = value;
					if ((value != null))
					{
						value.favorites.Add(this);
						this._program_id = value.id;
					}
					else
					{
						this._program_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("program");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_type_favorite", Storage="_task_type", ThisKey="task_type_id", OtherKey="id", IsForeignKey=true)]
		public task_type task_type
		{
			get
			{
				return this._task_type.Entity;
			}
			set
			{
				task_type previousValue = this._task_type.Entity;
				if (((previousValue != value) 
							|| (this._task_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._task_type.Entity = null;
						previousValue.favorites.Remove(this);
					}
					this._task_type.Entity = value;
					if ((value != null))
					{
						value.favorites.Add(this);
						this._task_type_id = value.id;
					}
					else
					{
						this._task_type_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("task_type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_favorite_plan_hours(favorite_plan_hour entity)
		{
			this.SendPropertyChanging();
			entity.favorite = this;
		}
		
		private void detach_favorite_plan_hours(favorite_plan_hour entity)
		{
			this.SendPropertyChanging();
			entity.favorite = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[log]")]
	public partial class log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.DateTime _entry_date;
		
		private long _profile_id;
		
		private string _category;
		
		private long _source_id;
		
		private string _comment;
		
		private string _entry_type;
		
		private EntityRef<profile> _profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onentry_dateChanging(System.DateTime value);
    partial void Onentry_dateChanged();
    partial void Onprofile_idChanging(long value);
    partial void Onprofile_idChanged();
    partial void OncategoryChanging(string value);
    partial void OncategoryChanged();
    partial void Onsource_idChanging(long value);
    partial void Onsource_idChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void Onentry_typeChanging(string value);
    partial void Onentry_typeChanged();
    #endregion
		
		public log()
		{
			this._profile = default(EntityRef<profile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entry_date", DbType="DateTime NOT NULL")]
		public System.DateTime entry_date
		{
			get
			{
				return this._entry_date;
			}
			set
			{
				if ((this._entry_date != value))
				{
					this.Onentry_dateChanging(value);
					this.SendPropertyChanging();
					this._entry_date = value;
					this.SendPropertyChanged("entry_date");
					this.Onentry_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profile_id", DbType="BigInt NOT NULL")]
		public long profile_id
		{
			get
			{
				return this._profile_id;
			}
			set
			{
				if ((this._profile_id != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprofile_idChanging(value);
					this.SendPropertyChanging();
					this._profile_id = value;
					this.SendPropertyChanged("profile_id");
					this.Onprofile_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string category
		{
			get
			{
				return this._category;
			}
			set
			{
				if ((this._category != value))
				{
					this.OncategoryChanging(value);
					this.SendPropertyChanging();
					this._category = value;
					this.SendPropertyChanged("category");
					this.OncategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_source_id", DbType="BigInt NOT NULL")]
		public long source_id
		{
			get
			{
				return this._source_id;
			}
			set
			{
				if ((this._source_id != value))
				{
					this.Onsource_idChanging(value);
					this.SendPropertyChanging();
					this._source_id = value;
					this.SendPropertyChanged("source_id");
					this.Onsource_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entry_type", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string entry_type
		{
			get
			{
				return this._entry_type;
			}
			set
			{
				if ((this._entry_type != value))
				{
					this.Onentry_typeChanging(value);
					this.SendPropertyChanging();
					this._entry_type = value;
					this.SendPropertyChanged("entry_type");
					this.Onentry_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_log", Storage="_profile", ThisKey="profile_id", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.logs.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.logs.Add(this);
						this._profile_id = value.id;
					}
					else
					{
						this._profile_id = default(long);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.patches")]
	public partial class patch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private System.DateTime _installed;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OninstalledChanging(System.DateTime value);
    partial void OninstalledChanged();
    #endregion
		
		public patch()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_installed", DbType="DateTime NOT NULL")]
		public System.DateTime installed
		{
			get
			{
				return this._installed;
			}
			set
			{
				if ((this._installed != value))
				{
					this.OninstalledChanging(value);
					this.SendPropertyChanging();
					this._installed = value;
					this.SendPropertyChanged("installed");
					this.OninstalledChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.preferences")]
	public partial class preference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _profile_id;
		
		private string _name;
		
		private string _value;
		
		private EntityRef<profile> _profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onprofile_idChanging(long value);
    partial void Onprofile_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    #endregion
		
		public preference()
		{
			this._profile = default(EntityRef<profile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profile_id", DbType="BigInt NOT NULL")]
		public long profile_id
		{
			get
			{
				return this._profile_id;
			}
			set
			{
				if ((this._profile_id != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprofile_idChanging(value);
					this.SendPropertyChanging();
					this._profile_id = value;
					this.SendPropertyChanged("profile_id");
					this.Onprofile_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_preference", Storage="_profile", ThisKey="profile_id", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.preferences.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.preferences.Add(this);
						this._profile_id = value.id;
					}
					else
					{
						this._profile_id = default(long);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.profile_log")]
	public partial class profile_log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _profile_id;
		
		private System.DateTime _entry_date;
		
		private string _category;
		
		private string _comment;
		
		private System.Nullable<long> _source_id;
		
		private EntityRef<profile> _profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onprofile_idChanging(long value);
    partial void Onprofile_idChanged();
    partial void Onentry_dateChanging(System.DateTime value);
    partial void Onentry_dateChanged();
    partial void OncategoryChanging(string value);
    partial void OncategoryChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void Onsource_idChanging(System.Nullable<long> value);
    partial void Onsource_idChanged();
    #endregion
		
		public profile_log()
		{
			this._profile = default(EntityRef<profile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profile_id", DbType="BigInt NOT NULL")]
		public long profile_id
		{
			get
			{
				return this._profile_id;
			}
			set
			{
				if ((this._profile_id != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprofile_idChanging(value);
					this.SendPropertyChanging();
					this._profile_id = value;
					this.SendPropertyChanged("profile_id");
					this.Onprofile_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entry_date", DbType="DateTime NOT NULL")]
		public System.DateTime entry_date
		{
			get
			{
				return this._entry_date;
			}
			set
			{
				if ((this._entry_date != value))
				{
					this.Onentry_dateChanging(value);
					this.SendPropertyChanging();
					this._entry_date = value;
					this.SendPropertyChanged("entry_date");
					this.Onentry_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string category
		{
			get
			{
				return this._category;
			}
			set
			{
				if ((this._category != value))
				{
					this.OncategoryChanging(value);
					this.SendPropertyChanging();
					this._category = value;
					this.SendPropertyChanged("category");
					this.OncategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_source_id", DbType="BigInt")]
		public System.Nullable<long> source_id
		{
			get
			{
				return this._source_id;
			}
			set
			{
				if ((this._source_id != value))
				{
					this.Onsource_idChanging(value);
					this.SendPropertyChanging();
					this._source_id = value;
					this.SendPropertyChanged("source_id");
					this.Onsource_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_profile_log", Storage="_profile", ThisKey="profile_id", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.profile_logs.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.profile_logs.Add(this);
						this._profile_id = value.id;
					}
					else
					{
						this._profile_id = default(long);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.profiles")]
	public partial class profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _username;
		
		private string _display_name;
		
		private string _employee_id;
		
		private bool _exempt_plan;
		
		private bool _exempt_task;
		
		private bool _can_task;
		
		private bool _active;
		
		private string _org_code;
		
		private System.Nullable<long> _manager;
		
		private EntitySet<alert> _alerts;
		
		private EntitySet<alert> _alerts1;
		
		private EntitySet<favorite> _favorites;
		
		private EntitySet<log> _logs;
		
		private EntitySet<preference> _preferences;
		
		private EntitySet<profile_log> _profile_logs;
		
		private EntitySet<profile> _profiles;
		
		private EntitySet<report_group_profile> _report_group_profiles;
		
		private EntitySet<report_group> _report_groups;
		
		private EntitySet<report> _reports;
		
		private EntitySet<role_profile> _role_profiles;
		
		private EntitySet<task_issue> _task_issues;
		
		private EntitySet<task> _tasks;
		
		private EntitySet<task> _tasks1;
		
		private EntitySet<task> _tasks2;
		
		private EntitySet<team_profile> _team_profiles;
		
		private EntitySet<team> _teams;
		
		private EntitySet<weekly_plan> _weekly_plans;
		
		private EntitySet<weekly_plan> _weekly_plans1;
		
		private EntitySet<weekly_plan> _weekly_plans2;
		
		private EntityRef<profile> _profile1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void Ondisplay_nameChanging(string value);
    partial void Ondisplay_nameChanged();
    partial void Onemployee_idChanging(string value);
    partial void Onemployee_idChanged();
    partial void Onexempt_planChanging(bool value);
    partial void Onexempt_planChanged();
    partial void Onexempt_taskChanging(bool value);
    partial void Onexempt_taskChanged();
    partial void Oncan_taskChanging(bool value);
    partial void Oncan_taskChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Onorg_codeChanging(string value);
    partial void Onorg_codeChanged();
    partial void OnmanagerChanging(System.Nullable<long> value);
    partial void OnmanagerChanged();
    #endregion
		
		public profile()
		{
			this._alerts = new EntitySet<alert>(new Action<alert>(this.attach_alerts), new Action<alert>(this.detach_alerts));
			this._alerts1 = new EntitySet<alert>(new Action<alert>(this.attach_alerts1), new Action<alert>(this.detach_alerts1));
			this._favorites = new EntitySet<favorite>(new Action<favorite>(this.attach_favorites), new Action<favorite>(this.detach_favorites));
			this._logs = new EntitySet<log>(new Action<log>(this.attach_logs), new Action<log>(this.detach_logs));
			this._preferences = new EntitySet<preference>(new Action<preference>(this.attach_preferences), new Action<preference>(this.detach_preferences));
			this._profile_logs = new EntitySet<profile_log>(new Action<profile_log>(this.attach_profile_logs), new Action<profile_log>(this.detach_profile_logs));
			this._profiles = new EntitySet<profile>(new Action<profile>(this.attach_profiles), new Action<profile>(this.detach_profiles));
			this._report_group_profiles = new EntitySet<report_group_profile>(new Action<report_group_profile>(this.attach_report_group_profiles), new Action<report_group_profile>(this.detach_report_group_profiles));
			this._report_groups = new EntitySet<report_group>(new Action<report_group>(this.attach_report_groups), new Action<report_group>(this.detach_report_groups));
			this._reports = new EntitySet<report>(new Action<report>(this.attach_reports), new Action<report>(this.detach_reports));
			this._role_profiles = new EntitySet<role_profile>(new Action<role_profile>(this.attach_role_profiles), new Action<role_profile>(this.detach_role_profiles));
			this._task_issues = new EntitySet<task_issue>(new Action<task_issue>(this.attach_task_issues), new Action<task_issue>(this.detach_task_issues));
			this._tasks = new EntitySet<task>(new Action<task>(this.attach_tasks), new Action<task>(this.detach_tasks));
			this._tasks1 = new EntitySet<task>(new Action<task>(this.attach_tasks1), new Action<task>(this.detach_tasks1));
			this._tasks2 = new EntitySet<task>(new Action<task>(this.attach_tasks2), new Action<task>(this.detach_tasks2));
			this._team_profiles = new EntitySet<team_profile>(new Action<team_profile>(this.attach_team_profiles), new Action<team_profile>(this.detach_team_profiles));
			this._teams = new EntitySet<team>(new Action<team>(this.attach_teams), new Action<team>(this.detach_teams));
			this._weekly_plans = new EntitySet<weekly_plan>(new Action<weekly_plan>(this.attach_weekly_plans), new Action<weekly_plan>(this.detach_weekly_plans));
			this._weekly_plans1 = new EntitySet<weekly_plan>(new Action<weekly_plan>(this.attach_weekly_plans1), new Action<weekly_plan>(this.detach_weekly_plans1));
			this._weekly_plans2 = new EntitySet<weekly_plan>(new Action<weekly_plan>(this.attach_weekly_plans2), new Action<weekly_plan>(this.detach_weekly_plans2));
			this._profile1 = default(EntityRef<profile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_display_name", DbType="VarChar(64)")]
		public string display_name
		{
			get
			{
				return this._display_name;
			}
			set
			{
				if ((this._display_name != value))
				{
					this.Ondisplay_nameChanging(value);
					this.SendPropertyChanging();
					this._display_name = value;
					this.SendPropertyChanged("display_name");
					this.Ondisplay_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employee_id", DbType="VarChar(32)")]
		public string employee_id
		{
			get
			{
				return this._employee_id;
			}
			set
			{
				if ((this._employee_id != value))
				{
					this.Onemployee_idChanging(value);
					this.SendPropertyChanging();
					this._employee_id = value;
					this.SendPropertyChanged("employee_id");
					this.Onemployee_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exempt_plan", DbType="Bit NOT NULL")]
		public bool exempt_plan
		{
			get
			{
				return this._exempt_plan;
			}
			set
			{
				if ((this._exempt_plan != value))
				{
					this.Onexempt_planChanging(value);
					this.SendPropertyChanging();
					this._exempt_plan = value;
					this.SendPropertyChanged("exempt_plan");
					this.Onexempt_planChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exempt_task", DbType="Bit NOT NULL")]
		public bool exempt_task
		{
			get
			{
				return this._exempt_task;
			}
			set
			{
				if ((this._exempt_task != value))
				{
					this.Onexempt_taskChanging(value);
					this.SendPropertyChanging();
					this._exempt_task = value;
					this.SendPropertyChanged("exempt_task");
					this.Onexempt_taskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_can_task", DbType="Bit NOT NULL")]
		public bool can_task
		{
			get
			{
				return this._can_task;
			}
			set
			{
				if ((this._can_task != value))
				{
					this.Oncan_taskChanging(value);
					this.SendPropertyChanging();
					this._can_task = value;
					this.SendPropertyChanged("can_task");
					this.Oncan_taskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_org_code", DbType="VarChar(32)")]
		public string org_code
		{
			get
			{
				return this._org_code;
			}
			set
			{
				if ((this._org_code != value))
				{
					this.Onorg_codeChanging(value);
					this.SendPropertyChanging();
					this._org_code = value;
					this.SendPropertyChanged("org_code");
					this.Onorg_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_manager", DbType="BigInt")]
		public System.Nullable<long> manager
		{
			get
			{
				return this._manager;
			}
			set
			{
				if ((this._manager != value))
				{
					if (this._profile1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmanagerChanging(value);
					this.SendPropertyChanging();
					this._manager = value;
					this.SendPropertyChanged("manager");
					this.OnmanagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_alert", Storage="_alerts", ThisKey="id", OtherKey="creator_id")]
		public EntitySet<alert> alerts
		{
			get
			{
				return this._alerts;
			}
			set
			{
				this._alerts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_alert1", Storage="_alerts1", ThisKey="id", OtherKey="profile_id")]
		public EntitySet<alert> alerts1
		{
			get
			{
				return this._alerts1;
			}
			set
			{
				this._alerts1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_favorite", Storage="_favorites", ThisKey="id", OtherKey="profile_id")]
		public EntitySet<favorite> favorites
		{
			get
			{
				return this._favorites;
			}
			set
			{
				this._favorites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_log", Storage="_logs", ThisKey="id", OtherKey="profile_id")]
		public EntitySet<log> logs
		{
			get
			{
				return this._logs;
			}
			set
			{
				this._logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_preference", Storage="_preferences", ThisKey="id", OtherKey="profile_id")]
		public EntitySet<preference> preferences
		{
			get
			{
				return this._preferences;
			}
			set
			{
				this._preferences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_profile_log", Storage="_profile_logs", ThisKey="id", OtherKey="profile_id")]
		public EntitySet<profile_log> profile_logs
		{
			get
			{
				return this._profile_logs;
			}
			set
			{
				this._profile_logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_profile", Storage="_profiles", ThisKey="id", OtherKey="manager")]
		public EntitySet<profile> profiles
		{
			get
			{
				return this._profiles;
			}
			set
			{
				this._profiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_report_group_profile", Storage="_report_group_profiles", ThisKey="id", OtherKey="profile_id")]
		public EntitySet<report_group_profile> report_group_profiles
		{
			get
			{
				return this._report_group_profiles;
			}
			set
			{
				this._report_group_profiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_report_group", Storage="_report_groups", ThisKey="id", OtherKey="profile_id")]
		public EntitySet<report_group> report_groups
		{
			get
			{
				return this._report_groups;
			}
			set
			{
				this._report_groups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_report", Storage="_reports", ThisKey="id", OtherKey="profile_id")]
		public EntitySet<report> reports
		{
			get
			{
				return this._reports;
			}
			set
			{
				this._reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_role_profile", Storage="_role_profiles", ThisKey="id", OtherKey="profile_id")]
		public EntitySet<role_profile> role_profiles
		{
			get
			{
				return this._role_profiles;
			}
			set
			{
				this._role_profiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_task_issue", Storage="_task_issues", ThisKey="id", OtherKey="profile_id")]
		public EntitySet<task_issue> task_issues
		{
			get
			{
				return this._task_issues;
			}
			set
			{
				this._task_issues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_task", Storage="_tasks", ThisKey="id", OtherKey="originator")]
		public EntitySet<task> tasks
		{
			get
			{
				return this._tasks;
			}
			set
			{
				this._tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_task1", Storage="_tasks1", ThisKey="id", OtherKey="owner_id")]
		public EntitySet<task> tasks1
		{
			get
			{
				return this._tasks1;
			}
			set
			{
				this._tasks1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_task2", Storage="_tasks2", ThisKey="id", OtherKey="profile_id")]
		public EntitySet<task> tasks2
		{
			get
			{
				return this._tasks2;
			}
			set
			{
				this._tasks2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_team_profile", Storage="_team_profiles", ThisKey="id", OtherKey="profile_id")]
		public EntitySet<team_profile> team_profiles
		{
			get
			{
				return this._team_profiles;
			}
			set
			{
				this._team_profiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_team", Storage="_teams", ThisKey="id", OtherKey="owner_id")]
		public EntitySet<team> teams
		{
			get
			{
				return this._teams;
			}
			set
			{
				this._teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_weekly_plan", Storage="_weekly_plans", ThisKey="id", OtherKey="log_approved_by")]
		public EntitySet<weekly_plan> weekly_plans
		{
			get
			{
				return this._weekly_plans;
			}
			set
			{
				this._weekly_plans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_weekly_plan1", Storage="_weekly_plans1", ThisKey="id", OtherKey="plan_approved_by")]
		public EntitySet<weekly_plan> weekly_plans1
		{
			get
			{
				return this._weekly_plans1;
			}
			set
			{
				this._weekly_plans1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_weekly_plan2", Storage="_weekly_plans2", ThisKey="id", OtherKey="profile_id")]
		public EntitySet<weekly_plan> weekly_plans2
		{
			get
			{
				return this._weekly_plans2;
			}
			set
			{
				this._weekly_plans2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_profile", Storage="_profile1", ThisKey="manager", OtherKey="id", IsForeignKey=true)]
		public profile profile1
		{
			get
			{
				return this._profile1.Entity;
			}
			set
			{
				profile previousValue = this._profile1.Entity;
				if (((previousValue != value) 
							|| (this._profile1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile1.Entity = null;
						previousValue.profiles.Remove(this);
					}
					this._profile1.Entity = value;
					if ((value != null))
					{
						value.profiles.Add(this);
						this._manager = value.id;
					}
					else
					{
						this._manager = default(Nullable<long>);
					}
					this.SendPropertyChanged("profile1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_alerts(alert entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_alerts(alert entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_alerts1(alert entity)
		{
			this.SendPropertyChanging();
			entity.profile1 = this;
		}
		
		private void detach_alerts1(alert entity)
		{
			this.SendPropertyChanging();
			entity.profile1 = null;
		}
		
		private void attach_favorites(favorite entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_favorites(favorite entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_logs(log entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_logs(log entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_preferences(preference entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_preferences(preference entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_profile_logs(profile_log entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_profile_logs(profile_log entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_profiles(profile entity)
		{
			this.SendPropertyChanging();
			entity.profile1 = this;
		}
		
		private void detach_profiles(profile entity)
		{
			this.SendPropertyChanging();
			entity.profile1 = null;
		}
		
		private void attach_report_group_profiles(report_group_profile entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_report_group_profiles(report_group_profile entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_report_groups(report_group entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_report_groups(report_group entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_reports(report entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_reports(report entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_role_profiles(role_profile entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_role_profiles(role_profile entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_task_issues(task_issue entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_task_issues(task_issue entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_tasks(task entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_tasks(task entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_tasks1(task entity)
		{
			this.SendPropertyChanging();
			entity.profile1 = this;
		}
		
		private void detach_tasks1(task entity)
		{
			this.SendPropertyChanging();
			entity.profile1 = null;
		}
		
		private void attach_tasks2(task entity)
		{
			this.SendPropertyChanging();
			entity.profile2 = this;
		}
		
		private void detach_tasks2(task entity)
		{
			this.SendPropertyChanging();
			entity.profile2 = null;
		}
		
		private void attach_team_profiles(team_profile entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_team_profiles(team_profile entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_teams(team entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_teams(team entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_weekly_plans(weekly_plan entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_weekly_plans(weekly_plan entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
		
		private void attach_weekly_plans1(weekly_plan entity)
		{
			this.SendPropertyChanging();
			entity.profile1 = this;
		}
		
		private void detach_weekly_plans1(weekly_plan entity)
		{
			this.SendPropertyChanging();
			entity.profile1 = null;
		}
		
		private void attach_weekly_plans2(weekly_plan entity)
		{
			this.SendPropertyChanging();
			entity.profile2 = this;
		}
		
		private void detach_weekly_plans2(weekly_plan entity)
		{
			this.SendPropertyChanging();
			entity.profile2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.programs")]
	public partial class program : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _title;
		
		private bool _active;
		
		private EntitySet<favorite> _favorites;
		
		private EntitySet<task> _tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
		
		public program()
		{
			this._favorites = new EntitySet<favorite>(new Action<favorite>(this.attach_favorites), new Action<favorite>(this.detach_favorites));
			this._tasks = new EntitySet<task>(new Action<task>(this.attach_tasks), new Action<task>(this.detach_tasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="program_favorite", Storage="_favorites", ThisKey="id", OtherKey="program_id")]
		public EntitySet<favorite> favorites
		{
			get
			{
				return this._favorites;
			}
			set
			{
				this._favorites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="program_task", Storage="_tasks", ThisKey="id", OtherKey="program_id")]
		public EntitySet<task> tasks
		{
			get
			{
				return this._tasks;
			}
			set
			{
				this._tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_favorites(favorite entity)
		{
			this.SendPropertyChanging();
			entity.program = this;
		}
		
		private void detach_favorites(favorite entity)
		{
			this.SendPropertyChanging();
			entity.program = null;
		}
		
		private void attach_tasks(task entity)
		{
			this.SendPropertyChanging();
			entity.program = this;
		}
		
		private void detach_tasks(task entity)
		{
			this.SendPropertyChanging();
			entity.program = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.report_group_groups")]
	public partial class report_group_group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _parent_group_id;
		
		private long _child_group_id;
		
		private EntityRef<report_group> _report_group;
		
		private EntityRef<report_group> _report_group1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onparent_group_idChanging(long value);
    partial void Onparent_group_idChanged();
    partial void Onchild_group_idChanging(long value);
    partial void Onchild_group_idChanged();
    #endregion
		
		public report_group_group()
		{
			this._report_group = default(EntityRef<report_group>);
			this._report_group1 = default(EntityRef<report_group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parent_group_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long parent_group_id
		{
			get
			{
				return this._parent_group_id;
			}
			set
			{
				if ((this._parent_group_id != value))
				{
					if (this._report_group1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onparent_group_idChanging(value);
					this.SendPropertyChanging();
					this._parent_group_id = value;
					this.SendPropertyChanged("parent_group_id");
					this.Onparent_group_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_child_group_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long child_group_id
		{
			get
			{
				return this._child_group_id;
			}
			set
			{
				if ((this._child_group_id != value))
				{
					if (this._report_group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onchild_group_idChanging(value);
					this.SendPropertyChanging();
					this._child_group_id = value;
					this.SendPropertyChanged("child_group_id");
					this.Onchild_group_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="report_group_report_group_group", Storage="_report_group", ThisKey="child_group_id", OtherKey="id", IsForeignKey=true)]
		public report_group report_group
		{
			get
			{
				return this._report_group.Entity;
			}
			set
			{
				report_group previousValue = this._report_group.Entity;
				if (((previousValue != value) 
							|| (this._report_group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._report_group.Entity = null;
						previousValue.report_group_groups.Remove(this);
					}
					this._report_group.Entity = value;
					if ((value != null))
					{
						value.report_group_groups.Add(this);
						this._child_group_id = value.id;
					}
					else
					{
						this._child_group_id = default(long);
					}
					this.SendPropertyChanged("report_group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="report_group_report_group_group1", Storage="_report_group1", ThisKey="parent_group_id", OtherKey="id", IsForeignKey=true)]
		public report_group report_group1
		{
			get
			{
				return this._report_group1.Entity;
			}
			set
			{
				report_group previousValue = this._report_group1.Entity;
				if (((previousValue != value) 
							|| (this._report_group1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._report_group1.Entity = null;
						previousValue.report_group_groups1.Remove(this);
					}
					this._report_group1.Entity = value;
					if ((value != null))
					{
						value.report_group_groups1.Add(this);
						this._parent_group_id = value.id;
					}
					else
					{
						this._parent_group_id = default(long);
					}
					this.SendPropertyChanged("report_group1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.report_group_profiles")]
	public partial class report_group_profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _report_group_id;
		
		private long _profile_id;
		
		private EntityRef<profile> _profile;
		
		private EntityRef<report_group> _report_group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onreport_group_idChanging(long value);
    partial void Onreport_group_idChanged();
    partial void Onprofile_idChanging(long value);
    partial void Onprofile_idChanged();
    #endregion
		
		public report_group_profile()
		{
			this._profile = default(EntityRef<profile>);
			this._report_group = default(EntityRef<report_group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_report_group_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long report_group_id
		{
			get
			{
				return this._report_group_id;
			}
			set
			{
				if ((this._report_group_id != value))
				{
					if (this._report_group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onreport_group_idChanging(value);
					this.SendPropertyChanging();
					this._report_group_id = value;
					this.SendPropertyChanged("report_group_id");
					this.Onreport_group_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profile_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long profile_id
		{
			get
			{
				return this._profile_id;
			}
			set
			{
				if ((this._profile_id != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprofile_idChanging(value);
					this.SendPropertyChanging();
					this._profile_id = value;
					this.SendPropertyChanged("profile_id");
					this.Onprofile_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_report_group_profile", Storage="_profile", ThisKey="profile_id", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.report_group_profiles.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.report_group_profiles.Add(this);
						this._profile_id = value.id;
					}
					else
					{
						this._profile_id = default(long);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="report_group_report_group_profile", Storage="_report_group", ThisKey="report_group_id", OtherKey="id", IsForeignKey=true)]
		public report_group report_group
		{
			get
			{
				return this._report_group.Entity;
			}
			set
			{
				report_group previousValue = this._report_group.Entity;
				if (((previousValue != value) 
							|| (this._report_group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._report_group.Entity = null;
						previousValue.report_group_profiles.Remove(this);
					}
					this._report_group.Entity = value;
					if ((value != null))
					{
						value.report_group_profiles.Add(this);
						this._report_group_id = value.id;
					}
					else
					{
						this._report_group_id = default(long);
					}
					this.SendPropertyChanged("report_group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.report_group_teams")]
	public partial class report_group_team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _report_group_id;
		
		private long _team_id;
		
		private EntityRef<report_group> _report_group;
		
		private EntityRef<team> _team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onreport_group_idChanging(long value);
    partial void Onreport_group_idChanged();
    partial void Onteam_idChanging(long value);
    partial void Onteam_idChanged();
    #endregion
		
		public report_group_team()
		{
			this._report_group = default(EntityRef<report_group>);
			this._team = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_report_group_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long report_group_id
		{
			get
			{
				return this._report_group_id;
			}
			set
			{
				if ((this._report_group_id != value))
				{
					if (this._report_group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onreport_group_idChanging(value);
					this.SendPropertyChanging();
					this._report_group_id = value;
					this.SendPropertyChanged("report_group_id");
					this.Onreport_group_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long team_id
		{
			get
			{
				return this._team_id;
			}
			set
			{
				if ((this._team_id != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam_idChanging(value);
					this.SendPropertyChanging();
					this._team_id = value;
					this.SendPropertyChanged("team_id");
					this.Onteam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="report_group_report_group_team", Storage="_report_group", ThisKey="report_group_id", OtherKey="id", IsForeignKey=true)]
		public report_group report_group
		{
			get
			{
				return this._report_group.Entity;
			}
			set
			{
				report_group previousValue = this._report_group.Entity;
				if (((previousValue != value) 
							|| (this._report_group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._report_group.Entity = null;
						previousValue.report_group_teams.Remove(this);
					}
					this._report_group.Entity = value;
					if ((value != null))
					{
						value.report_group_teams.Add(this);
						this._report_group_id = value.id;
					}
					else
					{
						this._report_group_id = default(long);
					}
					this.SendPropertyChanged("report_group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_report_group_team", Storage="_team", ThisKey="team_id", OtherKey="id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.report_group_teams.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.report_group_teams.Add(this);
						this._team_id = value.id;
					}
					else
					{
						this._team_id = default(long);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.report_groups")]
	public partial class report_group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _title;
		
		private string _description;
		
		private long _profile_id;
		
		private bool _public_flag;
		
		private EntitySet<report_group_group> _report_group_groups;
		
		private EntitySet<report_group_group> _report_group_groups1;
		
		private EntitySet<report_group_profile> _report_group_profiles;
		
		private EntitySet<report_group_team> _report_group_teams;
		
		private EntitySet<report> _reports;
		
		private EntityRef<profile> _profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void Onprofile_idChanging(long value);
    partial void Onprofile_idChanged();
    partial void Onpublic_flagChanging(bool value);
    partial void Onpublic_flagChanged();
    #endregion
		
		public report_group()
		{
			this._report_group_groups = new EntitySet<report_group_group>(new Action<report_group_group>(this.attach_report_group_groups), new Action<report_group_group>(this.detach_report_group_groups));
			this._report_group_groups1 = new EntitySet<report_group_group>(new Action<report_group_group>(this.attach_report_group_groups1), new Action<report_group_group>(this.detach_report_group_groups1));
			this._report_group_profiles = new EntitySet<report_group_profile>(new Action<report_group_profile>(this.attach_report_group_profiles), new Action<report_group_profile>(this.detach_report_group_profiles));
			this._report_group_teams = new EntitySet<report_group_team>(new Action<report_group_team>(this.attach_report_group_teams), new Action<report_group_team>(this.detach_report_group_teams));
			this._reports = new EntitySet<report>(new Action<report>(this.attach_reports), new Action<report>(this.detach_reports));
			this._profile = default(EntityRef<profile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profile_id", DbType="BigInt NOT NULL")]
		public long profile_id
		{
			get
			{
				return this._profile_id;
			}
			set
			{
				if ((this._profile_id != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprofile_idChanging(value);
					this.SendPropertyChanging();
					this._profile_id = value;
					this.SendPropertyChanged("profile_id");
					this.Onprofile_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_public_flag", DbType="Bit NOT NULL")]
		public bool public_flag
		{
			get
			{
				return this._public_flag;
			}
			set
			{
				if ((this._public_flag != value))
				{
					this.Onpublic_flagChanging(value);
					this.SendPropertyChanging();
					this._public_flag = value;
					this.SendPropertyChanged("public_flag");
					this.Onpublic_flagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="report_group_report_group_group", Storage="_report_group_groups", ThisKey="id", OtherKey="child_group_id")]
		public EntitySet<report_group_group> report_group_groups
		{
			get
			{
				return this._report_group_groups;
			}
			set
			{
				this._report_group_groups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="report_group_report_group_group1", Storage="_report_group_groups1", ThisKey="id", OtherKey="parent_group_id")]
		public EntitySet<report_group_group> report_group_groups1
		{
			get
			{
				return this._report_group_groups1;
			}
			set
			{
				this._report_group_groups1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="report_group_report_group_profile", Storage="_report_group_profiles", ThisKey="id", OtherKey="report_group_id")]
		public EntitySet<report_group_profile> report_group_profiles
		{
			get
			{
				return this._report_group_profiles;
			}
			set
			{
				this._report_group_profiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="report_group_report_group_team", Storage="_report_group_teams", ThisKey="id", OtherKey="report_group_id")]
		public EntitySet<report_group_team> report_group_teams
		{
			get
			{
				return this._report_group_teams;
			}
			set
			{
				this._report_group_teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="report_group_report", Storage="_reports", ThisKey="id", OtherKey="report_group_id")]
		public EntitySet<report> reports
		{
			get
			{
				return this._reports;
			}
			set
			{
				this._reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_report_group", Storage="_profile", ThisKey="profile_id", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.report_groups.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.report_groups.Add(this);
						this._profile_id = value.id;
					}
					else
					{
						this._profile_id = default(long);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_report_group_groups(report_group_group entity)
		{
			this.SendPropertyChanging();
			entity.report_group = this;
		}
		
		private void detach_report_group_groups(report_group_group entity)
		{
			this.SendPropertyChanging();
			entity.report_group = null;
		}
		
		private void attach_report_group_groups1(report_group_group entity)
		{
			this.SendPropertyChanging();
			entity.report_group1 = this;
		}
		
		private void detach_report_group_groups1(report_group_group entity)
		{
			this.SendPropertyChanging();
			entity.report_group1 = null;
		}
		
		private void attach_report_group_profiles(report_group_profile entity)
		{
			this.SendPropertyChanging();
			entity.report_group = this;
		}
		
		private void detach_report_group_profiles(report_group_profile entity)
		{
			this.SendPropertyChanging();
			entity.report_group = null;
		}
		
		private void attach_report_group_teams(report_group_team entity)
		{
			this.SendPropertyChanging();
			entity.report_group = this;
		}
		
		private void detach_report_group_teams(report_group_team entity)
		{
			this.SendPropertyChanging();
			entity.report_group = null;
		}
		
		private void attach_reports(report entity)
		{
			this.SendPropertyChanging();
			entity.report_group = this;
		}
		
		private void detach_reports(report entity)
		{
			this.SendPropertyChanging();
			entity.report_group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.reports")]
	public partial class report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _profile_id;
		
		private long _report_group_id;
		
		private string _title;
		
		private string _description;
		
		private bool _public_flag;
		
		private string _type;
		
		private System.Nullable<System.DateTime> _from_date;
		
		private System.Nullable<System.DateTime> _to_date;
		
		private System.Nullable<int> _percent_base;
		
		private System.Nullable<int> _percent_goal;
		
		private string _attributes;
		
		private EntityRef<profile> _profile;
		
		private EntityRef<report_group> _report_group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onprofile_idChanging(long value);
    partial void Onprofile_idChanged();
    partial void Onreport_group_idChanging(long value);
    partial void Onreport_group_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void Onpublic_flagChanging(bool value);
    partial void Onpublic_flagChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void Onfrom_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onfrom_dateChanged();
    partial void Onto_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onto_dateChanged();
    partial void Onpercent_baseChanging(System.Nullable<int> value);
    partial void Onpercent_baseChanged();
    partial void Onpercent_goalChanging(System.Nullable<int> value);
    partial void Onpercent_goalChanged();
    partial void OnattributesChanging(string value);
    partial void OnattributesChanged();
    #endregion
		
		public report()
		{
			this._profile = default(EntityRef<profile>);
			this._report_group = default(EntityRef<report_group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profile_id", DbType="BigInt NOT NULL")]
		public long profile_id
		{
			get
			{
				return this._profile_id;
			}
			set
			{
				if ((this._profile_id != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprofile_idChanging(value);
					this.SendPropertyChanging();
					this._profile_id = value;
					this.SendPropertyChanged("profile_id");
					this.Onprofile_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_report_group_id", DbType="BigInt NOT NULL")]
		public long report_group_id
		{
			get
			{
				return this._report_group_id;
			}
			set
			{
				if ((this._report_group_id != value))
				{
					if (this._report_group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onreport_group_idChanging(value);
					this.SendPropertyChanging();
					this._report_group_id = value;
					this.SendPropertyChanged("report_group_id");
					this.Onreport_group_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_public_flag", DbType="Bit NOT NULL")]
		public bool public_flag
		{
			get
			{
				return this._public_flag;
			}
			set
			{
				if ((this._public_flag != value))
				{
					this.Onpublic_flagChanging(value);
					this.SendPropertyChanging();
					this._public_flag = value;
					this.SendPropertyChanged("public_flag");
					this.Onpublic_flagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_from_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> from_date
		{
			get
			{
				return this._from_date;
			}
			set
			{
				if ((this._from_date != value))
				{
					this.Onfrom_dateChanging(value);
					this.SendPropertyChanging();
					this._from_date = value;
					this.SendPropertyChanged("from_date");
					this.Onfrom_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_to_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> to_date
		{
			get
			{
				return this._to_date;
			}
			set
			{
				if ((this._to_date != value))
				{
					this.Onto_dateChanging(value);
					this.SendPropertyChanging();
					this._to_date = value;
					this.SendPropertyChanged("to_date");
					this.Onto_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percent_base", DbType="Int")]
		public System.Nullable<int> percent_base
		{
			get
			{
				return this._percent_base;
			}
			set
			{
				if ((this._percent_base != value))
				{
					this.Onpercent_baseChanging(value);
					this.SendPropertyChanging();
					this._percent_base = value;
					this.SendPropertyChanged("percent_base");
					this.Onpercent_baseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percent_goal", DbType="Int")]
		public System.Nullable<int> percent_goal
		{
			get
			{
				return this._percent_goal;
			}
			set
			{
				if ((this._percent_goal != value))
				{
					this.Onpercent_goalChanging(value);
					this.SendPropertyChanging();
					this._percent_goal = value;
					this.SendPropertyChanged("percent_goal");
					this.Onpercent_goalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attributes", DbType="VarChar(256)")]
		public string attributes
		{
			get
			{
				return this._attributes;
			}
			set
			{
				if ((this._attributes != value))
				{
					this.OnattributesChanging(value);
					this.SendPropertyChanging();
					this._attributes = value;
					this.SendPropertyChanged("attributes");
					this.OnattributesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_report", Storage="_profile", ThisKey="profile_id", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.reports.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.reports.Add(this);
						this._profile_id = value.id;
					}
					else
					{
						this._profile_id = default(long);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="report_group_report", Storage="_report_group", ThisKey="report_group_id", OtherKey="id", IsForeignKey=true)]
		public report_group report_group
		{
			get
			{
				return this._report_group.Entity;
			}
			set
			{
				report_group previousValue = this._report_group.Entity;
				if (((previousValue != value) 
							|| (this._report_group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._report_group.Entity = null;
						previousValue.reports.Remove(this);
					}
					this._report_group.Entity = value;
					if ((value != null))
					{
						value.reports.Add(this);
						this._report_group_id = value.id;
					}
					else
					{
						this._report_group_id = default(long);
					}
					this.SendPropertyChanged("report_group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.role_actions")]
	public partial class role_action : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _role_id;
		
		private long _action_id;
		
		private EntityRef<action> _action;
		
		private EntityRef<role> _role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrole_idChanging(long value);
    partial void Onrole_idChanged();
    partial void Onaction_idChanging(long value);
    partial void Onaction_idChanged();
    #endregion
		
		public role_action()
		{
			this._action = default(EntityRef<action>);
			this._role = default(EntityRef<role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long role_id
		{
			get
			{
				return this._role_id;
			}
			set
			{
				if ((this._role_id != value))
				{
					if (this._role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrole_idChanging(value);
					this.SendPropertyChanging();
					this._role_id = value;
					this.SendPropertyChanged("role_id");
					this.Onrole_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_action_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long action_id
		{
			get
			{
				return this._action_id;
			}
			set
			{
				if ((this._action_id != value))
				{
					if (this._action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onaction_idChanging(value);
					this.SendPropertyChanging();
					this._action_id = value;
					this.SendPropertyChanged("action_id");
					this.Onaction_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="action_role_action", Storage="_action", ThisKey="action_id", OtherKey="id", IsForeignKey=true)]
		public action action
		{
			get
			{
				return this._action.Entity;
			}
			set
			{
				action previousValue = this._action.Entity;
				if (((previousValue != value) 
							|| (this._action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._action.Entity = null;
						previousValue.role_actions.Remove(this);
					}
					this._action.Entity = value;
					if ((value != null))
					{
						value.role_actions.Add(this);
						this._action_id = value.id;
					}
					else
					{
						this._action_id = default(long);
					}
					this.SendPropertyChanged("action");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_role_action", Storage="_role", ThisKey="role_id", OtherKey="id", IsForeignKey=true)]
		public role role
		{
			get
			{
				return this._role.Entity;
			}
			set
			{
				role previousValue = this._role.Entity;
				if (((previousValue != value) 
							|| (this._role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._role.Entity = null;
						previousValue.role_actions.Remove(this);
					}
					this._role.Entity = value;
					if ((value != null))
					{
						value.role_actions.Add(this);
						this._role_id = value.id;
					}
					else
					{
						this._role_id = default(long);
					}
					this.SendPropertyChanged("role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.role_profiles")]
	public partial class role_profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _role_id;
		
		private long _profile_id;
		
		private EntityRef<profile> _profile;
		
		private EntityRef<role> _role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrole_idChanging(long value);
    partial void Onrole_idChanged();
    partial void Onprofile_idChanging(long value);
    partial void Onprofile_idChanged();
    #endregion
		
		public role_profile()
		{
			this._profile = default(EntityRef<profile>);
			this._role = default(EntityRef<role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long role_id
		{
			get
			{
				return this._role_id;
			}
			set
			{
				if ((this._role_id != value))
				{
					if (this._role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrole_idChanging(value);
					this.SendPropertyChanging();
					this._role_id = value;
					this.SendPropertyChanged("role_id");
					this.Onrole_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profile_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long profile_id
		{
			get
			{
				return this._profile_id;
			}
			set
			{
				if ((this._profile_id != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprofile_idChanging(value);
					this.SendPropertyChanging();
					this._profile_id = value;
					this.SendPropertyChanged("profile_id");
					this.Onprofile_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_role_profile", Storage="_profile", ThisKey="profile_id", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.role_profiles.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.role_profiles.Add(this);
						this._profile_id = value.id;
					}
					else
					{
						this._profile_id = default(long);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_role_profile", Storage="_role", ThisKey="role_id", OtherKey="id", IsForeignKey=true)]
		public role role
		{
			get
			{
				return this._role.Entity;
			}
			set
			{
				role previousValue = this._role.Entity;
				if (((previousValue != value) 
							|| (this._role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._role.Entity = null;
						previousValue.role_profiles.Remove(this);
					}
					this._role.Entity = value;
					if ((value != null))
					{
						value.role_profiles.Add(this);
						this._role_id = value.id;
					}
					else
					{
						this._role_id = default(long);
					}
					this.SendPropertyChanged("role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.roles")]
	public partial class role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _title;
		
		private string _description;
		
		private bool _active;
		
		private EntitySet<role_action> _role_actions;
		
		private EntitySet<role_profile> _role_profiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
		
		public role()
		{
			this._role_actions = new EntitySet<role_action>(new Action<role_action>(this.attach_role_actions), new Action<role_action>(this.detach_role_actions));
			this._role_profiles = new EntitySet<role_profile>(new Action<role_profile>(this.attach_role_profiles), new Action<role_profile>(this.detach_role_profiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_role_action", Storage="_role_actions", ThisKey="id", OtherKey="role_id")]
		public EntitySet<role_action> role_actions
		{
			get
			{
				return this._role_actions;
			}
			set
			{
				this._role_actions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_role_profile", Storage="_role_profiles", ThisKey="id", OtherKey="role_id")]
		public EntitySet<role_profile> role_profiles
		{
			get
			{
				return this._role_profiles;
			}
			set
			{
				this._role_profiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_role_actions(role_action entity)
		{
			this.SendPropertyChanging();
			entity.role = this;
		}
		
		private void detach_role_actions(role_action entity)
		{
			this.SendPropertyChanging();
			entity.role = null;
		}
		
		private void attach_role_profiles(role_profile entity)
		{
			this.SendPropertyChanging();
			entity.role = this;
		}
		
		private void detach_role_profiles(role_profile entity)
		{
			this.SendPropertyChanging();
			entity.role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.task_issues")]
	public partial class task_issue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _task_id;
		
		private long _profile_id;
		
		private bool _elevate;
		
		private string _comment;
		
		private bool _acknowleged;
		
		private EntityRef<profile> _profile;
		
		private EntityRef<task> _task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Ontask_idChanging(long value);
    partial void Ontask_idChanged();
    partial void Onprofile_idChanging(long value);
    partial void Onprofile_idChanged();
    partial void OnelevateChanging(bool value);
    partial void OnelevateChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void OnacknowlegedChanging(bool value);
    partial void OnacknowlegedChanged();
    #endregion
		
		public task_issue()
		{
			this._profile = default(EntityRef<profile>);
			this._task = default(EntityRef<task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_task_id", DbType="BigInt NOT NULL")]
		public long task_id
		{
			get
			{
				return this._task_id;
			}
			set
			{
				if ((this._task_id != value))
				{
					if (this._task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontask_idChanging(value);
					this.SendPropertyChanging();
					this._task_id = value;
					this.SendPropertyChanged("task_id");
					this.Ontask_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profile_id", DbType="BigInt NOT NULL")]
		public long profile_id
		{
			get
			{
				return this._profile_id;
			}
			set
			{
				if ((this._profile_id != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprofile_idChanging(value);
					this.SendPropertyChanging();
					this._profile_id = value;
					this.SendPropertyChanged("profile_id");
					this.Onprofile_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_elevate", DbType="Bit NOT NULL")]
		public bool elevate
		{
			get
			{
				return this._elevate;
			}
			set
			{
				if ((this._elevate != value))
				{
					this.OnelevateChanging(value);
					this.SendPropertyChanging();
					this._elevate = value;
					this.SendPropertyChanged("elevate");
					this.OnelevateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acknowleged", DbType="Bit NOT NULL")]
		public bool acknowleged
		{
			get
			{
				return this._acknowleged;
			}
			set
			{
				if ((this._acknowleged != value))
				{
					this.OnacknowlegedChanging(value);
					this.SendPropertyChanging();
					this._acknowleged = value;
					this.SendPropertyChanged("acknowleged");
					this.OnacknowlegedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_task_issue", Storage="_profile", ThisKey="profile_id", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.task_issues.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.task_issues.Add(this);
						this._profile_id = value.id;
					}
					else
					{
						this._profile_id = default(long);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_task_issue", Storage="_task", ThisKey="task_id", OtherKey="id", IsForeignKey=true)]
		public task task
		{
			get
			{
				return this._task.Entity;
			}
			set
			{
				task previousValue = this._task.Entity;
				if (((previousValue != value) 
							|| (this._task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._task.Entity = null;
						previousValue.task_issues.Remove(this);
					}
					this._task.Entity = value;
					if ((value != null))
					{
						value.task_issues.Add(this);
						this._task_id = value.id;
					}
					else
					{
						this._task_id = default(long);
					}
					this.SendPropertyChanged("task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.task_types")]
	public partial class task_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _parent_id;
		
		private System.Nullable<long> _team_id;
		
		private string _title;
		
		private string _description;
		
		private bool _active;
		
		private EntitySet<complexity> _complexities;
		
		private EntitySet<favorite> _favorites;
		
		private EntitySet<task_type> _task_types;
		
		private EntitySet<task> _tasks;
		
		private EntitySet<team_task_type> _team_task_types;
		
		private EntityRef<task_type> _task_type1;
		
		private EntityRef<team> _team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onparent_idChanging(System.Nullable<long> value);
    partial void Onparent_idChanged();
    partial void Onteam_idChanging(System.Nullable<long> value);
    partial void Onteam_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
		
		public task_type()
		{
			this._complexities = new EntitySet<complexity>(new Action<complexity>(this.attach_complexities), new Action<complexity>(this.detach_complexities));
			this._favorites = new EntitySet<favorite>(new Action<favorite>(this.attach_favorites), new Action<favorite>(this.detach_favorites));
			this._task_types = new EntitySet<task_type>(new Action<task_type>(this.attach_task_types), new Action<task_type>(this.detach_task_types));
			this._tasks = new EntitySet<task>(new Action<task>(this.attach_tasks), new Action<task>(this.detach_tasks));
			this._team_task_types = new EntitySet<team_task_type>(new Action<team_task_type>(this.attach_team_task_types), new Action<team_task_type>(this.detach_team_task_types));
			this._task_type1 = default(EntityRef<task_type>);
			this._team = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parent_id", DbType="BigInt")]
		public System.Nullable<long> parent_id
		{
			get
			{
				return this._parent_id;
			}
			set
			{
				if ((this._parent_id != value))
				{
					if (this._task_type1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onparent_idChanging(value);
					this.SendPropertyChanging();
					this._parent_id = value;
					this.SendPropertyChanged("parent_id");
					this.Onparent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_id", DbType="BigInt")]
		public System.Nullable<long> team_id
		{
			get
			{
				return this._team_id;
			}
			set
			{
				if ((this._team_id != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam_idChanging(value);
					this.SendPropertyChanging();
					this._team_id = value;
					this.SendPropertyChanged("team_id");
					this.Onteam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_type_complexity", Storage="_complexities", ThisKey="id", OtherKey="task_type_id")]
		public EntitySet<complexity> complexities
		{
			get
			{
				return this._complexities;
			}
			set
			{
				this._complexities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_type_favorite", Storage="_favorites", ThisKey="id", OtherKey="task_type_id")]
		public EntitySet<favorite> favorites
		{
			get
			{
				return this._favorites;
			}
			set
			{
				this._favorites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_type_task_type", Storage="_task_types", ThisKey="id", OtherKey="parent_id")]
		public EntitySet<task_type> task_types
		{
			get
			{
				return this._task_types;
			}
			set
			{
				this._task_types.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_type_task", Storage="_tasks", ThisKey="id", OtherKey="task_type_id")]
		public EntitySet<task> tasks
		{
			get
			{
				return this._tasks;
			}
			set
			{
				this._tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_type_team_task_type", Storage="_team_task_types", ThisKey="id", OtherKey="task_type_id")]
		public EntitySet<team_task_type> team_task_types
		{
			get
			{
				return this._team_task_types;
			}
			set
			{
				this._team_task_types.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_type_task_type", Storage="_task_type1", ThisKey="parent_id", OtherKey="id", IsForeignKey=true)]
		public task_type task_type1
		{
			get
			{
				return this._task_type1.Entity;
			}
			set
			{
				task_type previousValue = this._task_type1.Entity;
				if (((previousValue != value) 
							|| (this._task_type1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._task_type1.Entity = null;
						previousValue.task_types.Remove(this);
					}
					this._task_type1.Entity = value;
					if ((value != null))
					{
						value.task_types.Add(this);
						this._parent_id = value.id;
					}
					else
					{
						this._parent_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("task_type1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_task_type", Storage="_team", ThisKey="team_id", OtherKey="id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.task_types.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.task_types.Add(this);
						this._team_id = value.id;
					}
					else
					{
						this._team_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_complexities(complexity entity)
		{
			this.SendPropertyChanging();
			entity.task_type = this;
		}
		
		private void detach_complexities(complexity entity)
		{
			this.SendPropertyChanging();
			entity.task_type = null;
		}
		
		private void attach_favorites(favorite entity)
		{
			this.SendPropertyChanging();
			entity.task_type = this;
		}
		
		private void detach_favorites(favorite entity)
		{
			this.SendPropertyChanging();
			entity.task_type = null;
		}
		
		private void attach_task_types(task_type entity)
		{
			this.SendPropertyChanging();
			entity.task_type1 = this;
		}
		
		private void detach_task_types(task_type entity)
		{
			this.SendPropertyChanging();
			entity.task_type1 = null;
		}
		
		private void attach_tasks(task entity)
		{
			this.SendPropertyChanging();
			entity.task_type = this;
		}
		
		private void detach_tasks(task entity)
		{
			this.SendPropertyChanging();
			entity.task_type = null;
		}
		
		private void attach_team_task_types(team_task_type entity)
		{
			this.SendPropertyChanging();
			entity.task_type = this;
		}
		
		private void detach_team_task_types(team_task_type entity)
		{
			this.SendPropertyChanging();
			entity.task_type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tasks")]
	public partial class task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _parent_id;
		
		private System.Nullable<long> _task_type_id;
		
		private System.Nullable<long> _profile_id;
		
		private long _owner_id;
		
		private System.Nullable<long> _program_id;
		
		private System.Nullable<long> _complexity_id;
		
		private string _title;
		
		private bool _active;
		
		private string _source;
		
		private string _source_id;
		
		private System.Nullable<System.DateTime> _start_date;
		
		private System.Nullable<System.DateTime> _due_date;
		
		private string _status;
		
		private System.Nullable<double> _hours;
		
		private System.Nullable<System.DateTime> _completed_date;
		
		private System.Nullable<double> _estimate;
		
		private string _exit_criteria;
		
		private string _wbs;
		
		private string _owner_comments;
		
		private string _assignee_comments;
		
		private System.DateTime _created;
		
		private System.Nullable<System.DateTime> _on_hold_date;
		
		private bool _instantiated;
		
		private bool _fully_allocated;
		
		private bool _deleted;
		
		private System.Nullable<System.DateTime> _modified;
		
		private System.Nullable<long> _originator;
		
		private EntitySet<weekly_task> _weekly_tasks;
		
		private EntitySet<task_issue> _task_issues;
		
		private EntitySet<task> _tasks;
		
		private EntityRef<complexity> _complexity;
		
		private EntityRef<profile> _profile;
		
		private EntityRef<profile> _profile1;
		
		private EntityRef<task> _task1;
		
		private EntityRef<profile> _profile2;
		
		private EntityRef<program> _program;
		
		private EntityRef<task_type> _task_type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onparent_idChanging(System.Nullable<long> value);
    partial void Onparent_idChanged();
    partial void Ontask_type_idChanging(System.Nullable<long> value);
    partial void Ontask_type_idChanged();
    partial void Onprofile_idChanging(System.Nullable<long> value);
    partial void Onprofile_idChanged();
    partial void Onowner_idChanging(long value);
    partial void Onowner_idChanged();
    partial void Onprogram_idChanging(System.Nullable<long> value);
    partial void Onprogram_idChanged();
    partial void Oncomplexity_idChanging(System.Nullable<long> value);
    partial void Oncomplexity_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnsourceChanging(string value);
    partial void OnsourceChanged();
    partial void Onsource_idChanging(string value);
    partial void Onsource_idChanged();
    partial void Onstart_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onstart_dateChanged();
    partial void Ondue_dateChanging(System.Nullable<System.DateTime> value);
    partial void Ondue_dateChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnhoursChanging(System.Nullable<double> value);
    partial void OnhoursChanged();
    partial void Oncompleted_dateChanging(System.Nullable<System.DateTime> value);
    partial void Oncompleted_dateChanged();
    partial void OnestimateChanging(System.Nullable<double> value);
    partial void OnestimateChanged();
    partial void Onexit_criteriaChanging(string value);
    partial void Onexit_criteriaChanged();
    partial void OnwbsChanging(string value);
    partial void OnwbsChanged();
    partial void Onowner_commentsChanging(string value);
    partial void Onowner_commentsChanged();
    partial void Onassignee_commentsChanging(string value);
    partial void Onassignee_commentsChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    partial void Onon_hold_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onon_hold_dateChanged();
    partial void OninstantiatedChanging(bool value);
    partial void OninstantiatedChanged();
    partial void Onfully_allocatedChanging(bool value);
    partial void Onfully_allocatedChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    partial void OnmodifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnmodifiedChanged();
    partial void OnoriginatorChanging(System.Nullable<long> value);
    partial void OnoriginatorChanged();
    #endregion
		
		public task()
		{
			this._weekly_tasks = new EntitySet<weekly_task>(new Action<weekly_task>(this.attach_weekly_tasks), new Action<weekly_task>(this.detach_weekly_tasks));
			this._task_issues = new EntitySet<task_issue>(new Action<task_issue>(this.attach_task_issues), new Action<task_issue>(this.detach_task_issues));
			this._tasks = new EntitySet<task>(new Action<task>(this.attach_tasks), new Action<task>(this.detach_tasks));
			this._complexity = default(EntityRef<complexity>);
			this._profile = default(EntityRef<profile>);
			this._profile1 = default(EntityRef<profile>);
			this._task1 = default(EntityRef<task>);
			this._profile2 = default(EntityRef<profile>);
			this._program = default(EntityRef<program>);
			this._task_type = default(EntityRef<task_type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parent_id", DbType="BigInt")]
		public System.Nullable<long> parent_id
		{
			get
			{
				return this._parent_id;
			}
			set
			{
				if ((this._parent_id != value))
				{
					if (this._task1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onparent_idChanging(value);
					this.SendPropertyChanging();
					this._parent_id = value;
					this.SendPropertyChanged("parent_id");
					this.Onparent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_task_type_id", DbType="BigInt")]
		public System.Nullable<long> task_type_id
		{
			get
			{
				return this._task_type_id;
			}
			set
			{
				if ((this._task_type_id != value))
				{
					if (this._task_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontask_type_idChanging(value);
					this.SendPropertyChanging();
					this._task_type_id = value;
					this.SendPropertyChanged("task_type_id");
					this.Ontask_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profile_id", DbType="BigInt")]
		public System.Nullable<long> profile_id
		{
			get
			{
				return this._profile_id;
			}
			set
			{
				if ((this._profile_id != value))
				{
					if (this._profile2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprofile_idChanging(value);
					this.SendPropertyChanging();
					this._profile_id = value;
					this.SendPropertyChanged("profile_id");
					this.Onprofile_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_owner_id", DbType="BigInt NOT NULL")]
		public long owner_id
		{
			get
			{
				return this._owner_id;
			}
			set
			{
				if ((this._owner_id != value))
				{
					if (this._profile1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onowner_idChanging(value);
					this.SendPropertyChanging();
					this._owner_id = value;
					this.SendPropertyChanged("owner_id");
					this.Onowner_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_program_id", DbType="BigInt")]
		public System.Nullable<long> program_id
		{
			get
			{
				return this._program_id;
			}
			set
			{
				if ((this._program_id != value))
				{
					if (this._program.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprogram_idChanging(value);
					this.SendPropertyChanging();
					this._program_id = value;
					this.SendPropertyChanged("program_id");
					this.Onprogram_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_complexity_id", DbType="BigInt")]
		public System.Nullable<long> complexity_id
		{
			get
			{
				return this._complexity_id;
			}
			set
			{
				if ((this._complexity_id != value))
				{
					if (this._complexity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncomplexity_idChanging(value);
					this.SendPropertyChanging();
					this._complexity_id = value;
					this.SendPropertyChanged("complexity_id");
					this.Oncomplexity_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_source", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string source
		{
			get
			{
				return this._source;
			}
			set
			{
				if ((this._source != value))
				{
					this.OnsourceChanging(value);
					this.SendPropertyChanging();
					this._source = value;
					this.SendPropertyChanged("source");
					this.OnsourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_source_id", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string source_id
		{
			get
			{
				return this._source_id;
			}
			set
			{
				if ((this._source_id != value))
				{
					this.Onsource_idChanging(value);
					this.SendPropertyChanging();
					this._source_id = value;
					this.SendPropertyChanged("source_id");
					this.Onsource_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_start_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> start_date
		{
			get
			{
				return this._start_date;
			}
			set
			{
				if ((this._start_date != value))
				{
					this.Onstart_dateChanging(value);
					this.SendPropertyChanging();
					this._start_date = value;
					this.SendPropertyChanged("start_date");
					this.Onstart_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_due_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> due_date
		{
			get
			{
				return this._due_date;
			}
			set
			{
				if ((this._due_date != value))
				{
					this.Ondue_dateChanging(value);
					this.SendPropertyChanging();
					this._due_date = value;
					this.SendPropertyChanged("due_date");
					this.Ondue_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hours", DbType="Float")]
		public System.Nullable<double> hours
		{
			get
			{
				return this._hours;
			}
			set
			{
				if ((this._hours != value))
				{
					this.OnhoursChanging(value);
					this.SendPropertyChanging();
					this._hours = value;
					this.SendPropertyChanged("hours");
					this.OnhoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_completed_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> completed_date
		{
			get
			{
				return this._completed_date;
			}
			set
			{
				if ((this._completed_date != value))
				{
					this.Oncompleted_dateChanging(value);
					this.SendPropertyChanging();
					this._completed_date = value;
					this.SendPropertyChanged("completed_date");
					this.Oncompleted_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_estimate", DbType="Float")]
		public System.Nullable<double> estimate
		{
			get
			{
				return this._estimate;
			}
			set
			{
				if ((this._estimate != value))
				{
					this.OnestimateChanging(value);
					this.SendPropertyChanging();
					this._estimate = value;
					this.SendPropertyChanged("estimate");
					this.OnestimateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exit_criteria", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string exit_criteria
		{
			get
			{
				return this._exit_criteria;
			}
			set
			{
				if ((this._exit_criteria != value))
				{
					this.Onexit_criteriaChanging(value);
					this.SendPropertyChanging();
					this._exit_criteria = value;
					this.SendPropertyChanged("exit_criteria");
					this.Onexit_criteriaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wbs", DbType="VarChar(64)")]
		public string wbs
		{
			get
			{
				return this._wbs;
			}
			set
			{
				if ((this._wbs != value))
				{
					this.OnwbsChanging(value);
					this.SendPropertyChanging();
					this._wbs = value;
					this.SendPropertyChanged("wbs");
					this.OnwbsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_owner_comments", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string owner_comments
		{
			get
			{
				return this._owner_comments;
			}
			set
			{
				if ((this._owner_comments != value))
				{
					this.Onowner_commentsChanging(value);
					this.SendPropertyChanging();
					this._owner_comments = value;
					this.SendPropertyChanged("owner_comments");
					this.Onowner_commentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignee_comments", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string assignee_comments
		{
			get
			{
				return this._assignee_comments;
			}
			set
			{
				if ((this._assignee_comments != value))
				{
					this.Onassignee_commentsChanging(value);
					this.SendPropertyChanging();
					this._assignee_comments = value;
					this.SendPropertyChanged("assignee_comments");
					this.Onassignee_commentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_on_hold_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> on_hold_date
		{
			get
			{
				return this._on_hold_date;
			}
			set
			{
				if ((this._on_hold_date != value))
				{
					this.Onon_hold_dateChanging(value);
					this.SendPropertyChanging();
					this._on_hold_date = value;
					this.SendPropertyChanged("on_hold_date");
					this.Onon_hold_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_instantiated", DbType="Bit NOT NULL")]
		public bool instantiated
		{
			get
			{
				return this._instantiated;
			}
			set
			{
				if ((this._instantiated != value))
				{
					this.OninstantiatedChanging(value);
					this.SendPropertyChanging();
					this._instantiated = value;
					this.SendPropertyChanged("instantiated");
					this.OninstantiatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fully_allocated", DbType="Bit NOT NULL")]
		public bool fully_allocated
		{
			get
			{
				return this._fully_allocated;
			}
			set
			{
				if ((this._fully_allocated != value))
				{
					this.Onfully_allocatedChanging(value);
					this.SendPropertyChanging();
					this._fully_allocated = value;
					this.SendPropertyChanged("fully_allocated");
					this.Onfully_allocatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL")]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> modified
		{
			get
			{
				return this._modified;
			}
			set
			{
				if ((this._modified != value))
				{
					this.OnmodifiedChanging(value);
					this.SendPropertyChanging();
					this._modified = value;
					this.SendPropertyChanged("modified");
					this.OnmodifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_originator", DbType="BigInt")]
		public System.Nullable<long> originator
		{
			get
			{
				return this._originator;
			}
			set
			{
				if ((this._originator != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnoriginatorChanging(value);
					this.SendPropertyChanging();
					this._originator = value;
					this.SendPropertyChanged("originator");
					this.OnoriginatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_weekly_task", Storage="_weekly_tasks", ThisKey="id", OtherKey="task_id")]
		public EntitySet<weekly_task> weekly_tasks
		{
			get
			{
				return this._weekly_tasks;
			}
			set
			{
				this._weekly_tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_task_issue", Storage="_task_issues", ThisKey="id", OtherKey="task_id")]
		public EntitySet<task_issue> task_issues
		{
			get
			{
				return this._task_issues;
			}
			set
			{
				this._task_issues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_task", Storage="_tasks", ThisKey="id", OtherKey="parent_id")]
		public EntitySet<task> tasks
		{
			get
			{
				return this._tasks;
			}
			set
			{
				this._tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="complexity_task", Storage="_complexity", ThisKey="complexity_id", OtherKey="id", IsForeignKey=true)]
		public complexity complexity
		{
			get
			{
				return this._complexity.Entity;
			}
			set
			{
				complexity previousValue = this._complexity.Entity;
				if (((previousValue != value) 
							|| (this._complexity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._complexity.Entity = null;
						previousValue.tasks.Remove(this);
					}
					this._complexity.Entity = value;
					if ((value != null))
					{
						value.tasks.Add(this);
						this._complexity_id = value.id;
					}
					else
					{
						this._complexity_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("complexity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_task", Storage="_profile", ThisKey="originator", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.tasks.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.tasks.Add(this);
						this._originator = value.id;
					}
					else
					{
						this._originator = default(Nullable<long>);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_task1", Storage="_profile1", ThisKey="owner_id", OtherKey="id", IsForeignKey=true)]
		public profile profile1
		{
			get
			{
				return this._profile1.Entity;
			}
			set
			{
				profile previousValue = this._profile1.Entity;
				if (((previousValue != value) 
							|| (this._profile1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile1.Entity = null;
						previousValue.tasks1.Remove(this);
					}
					this._profile1.Entity = value;
					if ((value != null))
					{
						value.tasks1.Add(this);
						this._owner_id = value.id;
					}
					else
					{
						this._owner_id = default(long);
					}
					this.SendPropertyChanged("profile1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_task", Storage="_task1", ThisKey="parent_id", OtherKey="id", IsForeignKey=true)]
		public task task1
		{
			get
			{
				return this._task1.Entity;
			}
			set
			{
				task previousValue = this._task1.Entity;
				if (((previousValue != value) 
							|| (this._task1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._task1.Entity = null;
						previousValue.tasks.Remove(this);
					}
					this._task1.Entity = value;
					if ((value != null))
					{
						value.tasks.Add(this);
						this._parent_id = value.id;
					}
					else
					{
						this._parent_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("task1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_task2", Storage="_profile2", ThisKey="profile_id", OtherKey="id", IsForeignKey=true)]
		public profile profile2
		{
			get
			{
				return this._profile2.Entity;
			}
			set
			{
				profile previousValue = this._profile2.Entity;
				if (((previousValue != value) 
							|| (this._profile2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile2.Entity = null;
						previousValue.tasks2.Remove(this);
					}
					this._profile2.Entity = value;
					if ((value != null))
					{
						value.tasks2.Add(this);
						this._profile_id = value.id;
					}
					else
					{
						this._profile_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("profile2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="program_task", Storage="_program", ThisKey="program_id", OtherKey="id", IsForeignKey=true)]
		public program program
		{
			get
			{
				return this._program.Entity;
			}
			set
			{
				program previousValue = this._program.Entity;
				if (((previousValue != value) 
							|| (this._program.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._program.Entity = null;
						previousValue.tasks.Remove(this);
					}
					this._program.Entity = value;
					if ((value != null))
					{
						value.tasks.Add(this);
						this._program_id = value.id;
					}
					else
					{
						this._program_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("program");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_type_task", Storage="_task_type", ThisKey="task_type_id", OtherKey="id", IsForeignKey=true)]
		public task_type task_type
		{
			get
			{
				return this._task_type.Entity;
			}
			set
			{
				task_type previousValue = this._task_type.Entity;
				if (((previousValue != value) 
							|| (this._task_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._task_type.Entity = null;
						previousValue.tasks.Remove(this);
					}
					this._task_type.Entity = value;
					if ((value != null))
					{
						value.tasks.Add(this);
						this._task_type_id = value.id;
					}
					else
					{
						this._task_type_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("task_type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_weekly_tasks(weekly_task entity)
		{
			this.SendPropertyChanging();
			entity.task = this;
		}
		
		private void detach_weekly_tasks(weekly_task entity)
		{
			this.SendPropertyChanging();
			entity.task = null;
		}
		
		private void attach_task_issues(task_issue entity)
		{
			this.SendPropertyChanging();
			entity.task = this;
		}
		
		private void detach_task_issues(task_issue entity)
		{
			this.SendPropertyChanging();
			entity.task = null;
		}
		
		private void attach_tasks(task entity)
		{
			this.SendPropertyChanging();
			entity.task1 = this;
		}
		
		private void detach_tasks(task entity)
		{
			this.SendPropertyChanging();
			entity.task1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.team_barriers")]
	public partial class team_barrier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _team_id;
		
		private long _barrier_id;
		
		private EntityRef<barrier> _barrier;
		
		private EntityRef<team> _team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onteam_idChanging(long value);
    partial void Onteam_idChanged();
    partial void Onbarrier_idChanging(long value);
    partial void Onbarrier_idChanged();
    #endregion
		
		public team_barrier()
		{
			this._barrier = default(EntityRef<barrier>);
			this._team = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long team_id
		{
			get
			{
				return this._team_id;
			}
			set
			{
				if ((this._team_id != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam_idChanging(value);
					this.SendPropertyChanging();
					this._team_id = value;
					this.SendPropertyChanged("team_id");
					this.Onteam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_barrier_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long barrier_id
		{
			get
			{
				return this._barrier_id;
			}
			set
			{
				if ((this._barrier_id != value))
				{
					if (this._barrier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onbarrier_idChanging(value);
					this.SendPropertyChanging();
					this._barrier_id = value;
					this.SendPropertyChanged("barrier_id");
					this.Onbarrier_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="barrier_team_barrier", Storage="_barrier", ThisKey="barrier_id", OtherKey="id", IsForeignKey=true)]
		public barrier barrier
		{
			get
			{
				return this._barrier.Entity;
			}
			set
			{
				barrier previousValue = this._barrier.Entity;
				if (((previousValue != value) 
							|| (this._barrier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._barrier.Entity = null;
						previousValue.team_barriers.Remove(this);
					}
					this._barrier.Entity = value;
					if ((value != null))
					{
						value.team_barriers.Add(this);
						this._barrier_id = value.id;
					}
					else
					{
						this._barrier_id = default(long);
					}
					this.SendPropertyChanged("barrier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_team_barrier", Storage="_team", ThisKey="team_id", OtherKey="id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.team_barriers.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.team_barriers.Add(this);
						this._team_id = value.id;
					}
					else
					{
						this._team_id = default(long);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.team_org_codes")]
	public partial class team_org_code : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _team_id;
		
		private string _org_code;
		
		private EntityRef<team> _team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onteam_idChanging(long value);
    partial void Onteam_idChanged();
    partial void Onorg_codeChanging(string value);
    partial void Onorg_codeChanged();
    #endregion
		
		public team_org_code()
		{
			this._team = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long team_id
		{
			get
			{
				return this._team_id;
			}
			set
			{
				if ((this._team_id != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam_idChanging(value);
					this.SendPropertyChanging();
					this._team_id = value;
					this.SendPropertyChanged("team_id");
					this.Onteam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_org_code", DbType="VarChar(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string org_code
		{
			get
			{
				return this._org_code;
			}
			set
			{
				if ((this._org_code != value))
				{
					this.Onorg_codeChanging(value);
					this.SendPropertyChanging();
					this._org_code = value;
					this.SendPropertyChanged("org_code");
					this.Onorg_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_team_org_code", Storage="_team", ThisKey="team_id", OtherKey="id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.team_org_codes.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.team_org_codes.Add(this);
						this._team_id = value.id;
					}
					else
					{
						this._team_id = default(long);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.team_profiles")]
	public partial class team_profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _team_id;
		
		private long _profile_id;
		
		private string _role;
		
		private EntityRef<profile> _profile;
		
		private EntityRef<team> _team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onteam_idChanging(long value);
    partial void Onteam_idChanged();
    partial void Onprofile_idChanging(long value);
    partial void Onprofile_idChanged();
    partial void OnroleChanging(string value);
    partial void OnroleChanged();
    #endregion
		
		public team_profile()
		{
			this._profile = default(EntityRef<profile>);
			this._team = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long team_id
		{
			get
			{
				return this._team_id;
			}
			set
			{
				if ((this._team_id != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam_idChanging(value);
					this.SendPropertyChanging();
					this._team_id = value;
					this.SendPropertyChanged("team_id");
					this.Onteam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profile_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long profile_id
		{
			get
			{
				return this._profile_id;
			}
			set
			{
				if ((this._profile_id != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprofile_idChanging(value);
					this.SendPropertyChanging();
					this._profile_id = value;
					this.SendPropertyChanged("profile_id");
					this.Onprofile_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role", DbType="VarChar(16) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_team_profile", Storage="_profile", ThisKey="profile_id", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.team_profiles.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.team_profiles.Add(this);
						this._profile_id = value.id;
					}
					else
					{
						this._profile_id = default(long);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_team_profile", Storage="_team", ThisKey="team_id", OtherKey="id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.team_profiles.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.team_profiles.Add(this);
						this._team_id = value.id;
					}
					else
					{
						this._team_id = default(long);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.team_task_types")]
	public partial class team_task_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _team_id;
		
		private long _task_type_id;
		
		private EntityRef<task_type> _task_type;
		
		private EntityRef<team> _team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onteam_idChanging(long value);
    partial void Onteam_idChanged();
    partial void Ontask_type_idChanging(long value);
    partial void Ontask_type_idChanged();
    #endregion
		
		public team_task_type()
		{
			this._task_type = default(EntityRef<task_type>);
			this._team = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long team_id
		{
			get
			{
				return this._team_id;
			}
			set
			{
				if ((this._team_id != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam_idChanging(value);
					this.SendPropertyChanging();
					this._team_id = value;
					this.SendPropertyChanged("team_id");
					this.Onteam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_task_type_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long task_type_id
		{
			get
			{
				return this._task_type_id;
			}
			set
			{
				if ((this._task_type_id != value))
				{
					if (this._task_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontask_type_idChanging(value);
					this.SendPropertyChanging();
					this._task_type_id = value;
					this.SendPropertyChanged("task_type_id");
					this.Ontask_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_type_team_task_type", Storage="_task_type", ThisKey="task_type_id", OtherKey="id", IsForeignKey=true)]
		public task_type task_type
		{
			get
			{
				return this._task_type.Entity;
			}
			set
			{
				task_type previousValue = this._task_type.Entity;
				if (((previousValue != value) 
							|| (this._task_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._task_type.Entity = null;
						previousValue.team_task_types.Remove(this);
					}
					this._task_type.Entity = value;
					if ((value != null))
					{
						value.team_task_types.Add(this);
						this._task_type_id = value.id;
					}
					else
					{
						this._task_type_id = default(long);
					}
					this.SendPropertyChanged("task_type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_team_task_type", Storage="_team", ThisKey="team_id", OtherKey="id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.team_task_types.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.team_task_types.Add(this);
						this._team_id = value.id;
					}
					else
					{
						this._team_id = default(long);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.team_unplanned_codes")]
	public partial class team_unplanned_code : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _team_id;
		
		private long _unplanned_code_id;
		
		private EntityRef<team> _team;
		
		private EntityRef<unplanned_code> _unplanned_code;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onteam_idChanging(long value);
    partial void Onteam_idChanged();
    partial void Onunplanned_code_idChanging(long value);
    partial void Onunplanned_code_idChanged();
    #endregion
		
		public team_unplanned_code()
		{
			this._team = default(EntityRef<team>);
			this._unplanned_code = default(EntityRef<unplanned_code>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long team_id
		{
			get
			{
				return this._team_id;
			}
			set
			{
				if ((this._team_id != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam_idChanging(value);
					this.SendPropertyChanging();
					this._team_id = value;
					this.SendPropertyChanged("team_id");
					this.Onteam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unplanned_code_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long unplanned_code_id
		{
			get
			{
				return this._unplanned_code_id;
			}
			set
			{
				if ((this._unplanned_code_id != value))
				{
					if (this._unplanned_code.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onunplanned_code_idChanging(value);
					this.SendPropertyChanging();
					this._unplanned_code_id = value;
					this.SendPropertyChanged("unplanned_code_id");
					this.Onunplanned_code_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_team_unplanned_code", Storage="_team", ThisKey="team_id", OtherKey="id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.team_unplanned_codes.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.team_unplanned_codes.Add(this);
						this._team_id = value.id;
					}
					else
					{
						this._team_id = default(long);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="unplanned_code_team_unplanned_code", Storage="_unplanned_code", ThisKey="unplanned_code_id", OtherKey="id", IsForeignKey=true)]
		public unplanned_code unplanned_code
		{
			get
			{
				return this._unplanned_code.Entity;
			}
			set
			{
				unplanned_code previousValue = this._unplanned_code.Entity;
				if (((previousValue != value) 
							|| (this._unplanned_code.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._unplanned_code.Entity = null;
						previousValue.team_unplanned_codes.Remove(this);
					}
					this._unplanned_code.Entity = value;
					if ((value != null))
					{
						value.team_unplanned_codes.Add(this);
						this._unplanned_code_id = value.id;
					}
					else
					{
						this._unplanned_code_id = default(long);
					}
					this.SendPropertyChanged("unplanned_code");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.teams")]
	public partial class team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _parent_id;
		
		private string _title;
		
		private bool _complexity_based;
		
		private bool _active;
		
		private System.Nullable<long> _owner_id;
		
		private string _type;
		
		private EntitySet<barrier> _barriers;
		
		private EntitySet<barriers_description> _barriers_descriptions;
		
		private EntitySet<complexity> _complexities;
		
		private EntitySet<report_group_team> _report_group_teams;
		
		private EntitySet<task_type> _task_types;
		
		private EntitySet<team_barrier> _team_barriers;
		
		private EntitySet<team_org_code> _team_org_codes;
		
		private EntitySet<team_profile> _team_profiles;
		
		private EntitySet<team_task_type> _team_task_types;
		
		private EntitySet<team_unplanned_code> _team_unplanned_codes;
		
		private EntitySet<team> _teams;
		
		private EntitySet<unplanned_code> _unplanned_codes;
		
		private EntitySet<unplanned_codes_description> _unplanned_codes_descriptions;
		
		private EntitySet<weekly_plan> _weekly_plans;
		
		private EntityRef<profile> _profile;
		
		private EntityRef<team> _team1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onparent_idChanging(System.Nullable<long> value);
    partial void Onparent_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void Oncomplexity_basedChanging(bool value);
    partial void Oncomplexity_basedChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Onowner_idChanging(System.Nullable<long> value);
    partial void Onowner_idChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    #endregion
		
		public team()
		{
			this._barriers = new EntitySet<barrier>(new Action<barrier>(this.attach_barriers), new Action<barrier>(this.detach_barriers));
			this._barriers_descriptions = new EntitySet<barriers_description>(new Action<barriers_description>(this.attach_barriers_descriptions), new Action<barriers_description>(this.detach_barriers_descriptions));
			this._complexities = new EntitySet<complexity>(new Action<complexity>(this.attach_complexities), new Action<complexity>(this.detach_complexities));
			this._report_group_teams = new EntitySet<report_group_team>(new Action<report_group_team>(this.attach_report_group_teams), new Action<report_group_team>(this.detach_report_group_teams));
			this._task_types = new EntitySet<task_type>(new Action<task_type>(this.attach_task_types), new Action<task_type>(this.detach_task_types));
			this._team_barriers = new EntitySet<team_barrier>(new Action<team_barrier>(this.attach_team_barriers), new Action<team_barrier>(this.detach_team_barriers));
			this._team_org_codes = new EntitySet<team_org_code>(new Action<team_org_code>(this.attach_team_org_codes), new Action<team_org_code>(this.detach_team_org_codes));
			this._team_profiles = new EntitySet<team_profile>(new Action<team_profile>(this.attach_team_profiles), new Action<team_profile>(this.detach_team_profiles));
			this._team_task_types = new EntitySet<team_task_type>(new Action<team_task_type>(this.attach_team_task_types), new Action<team_task_type>(this.detach_team_task_types));
			this._team_unplanned_codes = new EntitySet<team_unplanned_code>(new Action<team_unplanned_code>(this.attach_team_unplanned_codes), new Action<team_unplanned_code>(this.detach_team_unplanned_codes));
			this._teams = new EntitySet<team>(new Action<team>(this.attach_teams), new Action<team>(this.detach_teams));
			this._unplanned_codes = new EntitySet<unplanned_code>(new Action<unplanned_code>(this.attach_unplanned_codes), new Action<unplanned_code>(this.detach_unplanned_codes));
			this._unplanned_codes_descriptions = new EntitySet<unplanned_codes_description>(new Action<unplanned_codes_description>(this.attach_unplanned_codes_descriptions), new Action<unplanned_codes_description>(this.detach_unplanned_codes_descriptions));
			this._weekly_plans = new EntitySet<weekly_plan>(new Action<weekly_plan>(this.attach_weekly_plans), new Action<weekly_plan>(this.detach_weekly_plans));
			this._profile = default(EntityRef<profile>);
			this._team1 = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parent_id", DbType="BigInt")]
		public System.Nullable<long> parent_id
		{
			get
			{
				return this._parent_id;
			}
			set
			{
				if ((this._parent_id != value))
				{
					if (this._team1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onparent_idChanging(value);
					this.SendPropertyChanging();
					this._parent_id = value;
					this.SendPropertyChanged("parent_id");
					this.Onparent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_complexity_based", DbType="Bit NOT NULL")]
		public bool complexity_based
		{
			get
			{
				return this._complexity_based;
			}
			set
			{
				if ((this._complexity_based != value))
				{
					this.Oncomplexity_basedChanging(value);
					this.SendPropertyChanging();
					this._complexity_based = value;
					this.SendPropertyChanged("complexity_based");
					this.Oncomplexity_basedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_owner_id", DbType="BigInt")]
		public System.Nullable<long> owner_id
		{
			get
			{
				return this._owner_id;
			}
			set
			{
				if ((this._owner_id != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onowner_idChanging(value);
					this.SendPropertyChanging();
					this._owner_id = value;
					this.SendPropertyChanged("owner_id");
					this.Onowner_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_barrier", Storage="_barriers", ThisKey="id", OtherKey="team_id")]
		public EntitySet<barrier> barriers
		{
			get
			{
				return this._barriers;
			}
			set
			{
				this._barriers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_barriers_description", Storage="_barriers_descriptions", ThisKey="id", OtherKey="team_id")]
		public EntitySet<barriers_description> barriers_descriptions
		{
			get
			{
				return this._barriers_descriptions;
			}
			set
			{
				this._barriers_descriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_complexity", Storage="_complexities", ThisKey="id", OtherKey="team_id")]
		public EntitySet<complexity> complexities
		{
			get
			{
				return this._complexities;
			}
			set
			{
				this._complexities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_report_group_team", Storage="_report_group_teams", ThisKey="id", OtherKey="team_id")]
		public EntitySet<report_group_team> report_group_teams
		{
			get
			{
				return this._report_group_teams;
			}
			set
			{
				this._report_group_teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_task_type", Storage="_task_types", ThisKey="id", OtherKey="team_id")]
		public EntitySet<task_type> task_types
		{
			get
			{
				return this._task_types;
			}
			set
			{
				this._task_types.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_team_barrier", Storage="_team_barriers", ThisKey="id", OtherKey="team_id")]
		public EntitySet<team_barrier> team_barriers
		{
			get
			{
				return this._team_barriers;
			}
			set
			{
				this._team_barriers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_team_org_code", Storage="_team_org_codes", ThisKey="id", OtherKey="team_id")]
		public EntitySet<team_org_code> team_org_codes
		{
			get
			{
				return this._team_org_codes;
			}
			set
			{
				this._team_org_codes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_team_profile", Storage="_team_profiles", ThisKey="id", OtherKey="team_id")]
		public EntitySet<team_profile> team_profiles
		{
			get
			{
				return this._team_profiles;
			}
			set
			{
				this._team_profiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_team_task_type", Storage="_team_task_types", ThisKey="id", OtherKey="team_id")]
		public EntitySet<team_task_type> team_task_types
		{
			get
			{
				return this._team_task_types;
			}
			set
			{
				this._team_task_types.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_team_unplanned_code", Storage="_team_unplanned_codes", ThisKey="id", OtherKey="team_id")]
		public EntitySet<team_unplanned_code> team_unplanned_codes
		{
			get
			{
				return this._team_unplanned_codes;
			}
			set
			{
				this._team_unplanned_codes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_team", Storage="_teams", ThisKey="id", OtherKey="parent_id")]
		public EntitySet<team> teams
		{
			get
			{
				return this._teams;
			}
			set
			{
				this._teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_unplanned_code", Storage="_unplanned_codes", ThisKey="id", OtherKey="team_id")]
		public EntitySet<unplanned_code> unplanned_codes
		{
			get
			{
				return this._unplanned_codes;
			}
			set
			{
				this._unplanned_codes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_unplanned_codes_description", Storage="_unplanned_codes_descriptions", ThisKey="id", OtherKey="team_id")]
		public EntitySet<unplanned_codes_description> unplanned_codes_descriptions
		{
			get
			{
				return this._unplanned_codes_descriptions;
			}
			set
			{
				this._unplanned_codes_descriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_weekly_plan", Storage="_weekly_plans", ThisKey="id", OtherKey="team_id")]
		public EntitySet<weekly_plan> weekly_plans
		{
			get
			{
				return this._weekly_plans;
			}
			set
			{
				this._weekly_plans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_team", Storage="_profile", ThisKey="owner_id", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.teams.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.teams.Add(this);
						this._owner_id = value.id;
					}
					else
					{
						this._owner_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_team", Storage="_team1", ThisKey="parent_id", OtherKey="id", IsForeignKey=true)]
		public team team1
		{
			get
			{
				return this._team1.Entity;
			}
			set
			{
				team previousValue = this._team1.Entity;
				if (((previousValue != value) 
							|| (this._team1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team1.Entity = null;
						previousValue.teams.Remove(this);
					}
					this._team1.Entity = value;
					if ((value != null))
					{
						value.teams.Add(this);
						this._parent_id = value.id;
					}
					else
					{
						this._parent_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("team1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_barriers(barrier entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_barriers(barrier entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
		
		private void attach_barriers_descriptions(barriers_description entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_barriers_descriptions(barriers_description entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
		
		private void attach_complexities(complexity entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_complexities(complexity entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
		
		private void attach_report_group_teams(report_group_team entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_report_group_teams(report_group_team entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
		
		private void attach_task_types(task_type entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_task_types(task_type entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
		
		private void attach_team_barriers(team_barrier entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_team_barriers(team_barrier entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
		
		private void attach_team_org_codes(team_org_code entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_team_org_codes(team_org_code entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
		
		private void attach_team_profiles(team_profile entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_team_profiles(team_profile entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
		
		private void attach_team_task_types(team_task_type entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_team_task_types(team_task_type entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
		
		private void attach_team_unplanned_codes(team_unplanned_code entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_team_unplanned_codes(team_unplanned_code entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
		
		private void attach_teams(team entity)
		{
			this.SendPropertyChanging();
			entity.team1 = this;
		}
		
		private void detach_teams(team entity)
		{
			this.SendPropertyChanging();
			entity.team1 = null;
		}
		
		private void attach_unplanned_codes(unplanned_code entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_unplanned_codes(unplanned_code entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
		
		private void attach_unplanned_codes_descriptions(unplanned_codes_description entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_unplanned_codes_descriptions(unplanned_codes_description entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
		
		private void attach_weekly_plans(weekly_plan entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_weekly_plans(weekly_plan entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.unplanned_codes")]
	public partial class unplanned_code : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _parent_id;
		
		private long _team_id;
		
		private string _code;
		
		private string _title;
		
		private string _description;
		
		private bool _active;
		
		private EntitySet<weekly_task> _weekly_tasks;
		
		private EntitySet<team_unplanned_code> _team_unplanned_codes;
		
		private EntitySet<unplanned_code> _unplanned_codes;
		
		private EntitySet<unplanned_codes_description> _unplanned_codes_descriptions;
		
		private EntityRef<unplanned_code> _unplanned_code1;
		
		private EntityRef<team> _team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onparent_idChanging(System.Nullable<long> value);
    partial void Onparent_idChanged();
    partial void Onteam_idChanging(long value);
    partial void Onteam_idChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
		
		public unplanned_code()
		{
			this._weekly_tasks = new EntitySet<weekly_task>(new Action<weekly_task>(this.attach_weekly_tasks), new Action<weekly_task>(this.detach_weekly_tasks));
			this._team_unplanned_codes = new EntitySet<team_unplanned_code>(new Action<team_unplanned_code>(this.attach_team_unplanned_codes), new Action<team_unplanned_code>(this.detach_team_unplanned_codes));
			this._unplanned_codes = new EntitySet<unplanned_code>(new Action<unplanned_code>(this.attach_unplanned_codes), new Action<unplanned_code>(this.detach_unplanned_codes));
			this._unplanned_codes_descriptions = new EntitySet<unplanned_codes_description>(new Action<unplanned_codes_description>(this.attach_unplanned_codes_descriptions), new Action<unplanned_codes_description>(this.detach_unplanned_codes_descriptions));
			this._unplanned_code1 = default(EntityRef<unplanned_code>);
			this._team = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parent_id", DbType="BigInt")]
		public System.Nullable<long> parent_id
		{
			get
			{
				return this._parent_id;
			}
			set
			{
				if ((this._parent_id != value))
				{
					if (this._unplanned_code1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onparent_idChanging(value);
					this.SendPropertyChanging();
					this._parent_id = value;
					this.SendPropertyChanged("parent_id");
					this.Onparent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_id", DbType="BigInt NOT NULL")]
		public long team_id
		{
			get
			{
				return this._team_id;
			}
			set
			{
				if ((this._team_id != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam_idChanging(value);
					this.SendPropertyChanging();
					this._team_id = value;
					this.SendPropertyChanged("team_id");
					this.Onteam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="unplanned_code_weekly_task", Storage="_weekly_tasks", ThisKey="id", OtherKey="unplanned_code_id")]
		public EntitySet<weekly_task> weekly_tasks
		{
			get
			{
				return this._weekly_tasks;
			}
			set
			{
				this._weekly_tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="unplanned_code_team_unplanned_code", Storage="_team_unplanned_codes", ThisKey="id", OtherKey="unplanned_code_id")]
		public EntitySet<team_unplanned_code> team_unplanned_codes
		{
			get
			{
				return this._team_unplanned_codes;
			}
			set
			{
				this._team_unplanned_codes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="unplanned_code_unplanned_code", Storage="_unplanned_codes", ThisKey="id", OtherKey="parent_id")]
		public EntitySet<unplanned_code> unplanned_codes
		{
			get
			{
				return this._unplanned_codes;
			}
			set
			{
				this._unplanned_codes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="unplanned_code_unplanned_codes_description", Storage="_unplanned_codes_descriptions", ThisKey="id", OtherKey="unplanned_code_id")]
		public EntitySet<unplanned_codes_description> unplanned_codes_descriptions
		{
			get
			{
				return this._unplanned_codes_descriptions;
			}
			set
			{
				this._unplanned_codes_descriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="unplanned_code_unplanned_code", Storage="_unplanned_code1", ThisKey="parent_id", OtherKey="id", IsForeignKey=true)]
		public unplanned_code unplanned_code1
		{
			get
			{
				return this._unplanned_code1.Entity;
			}
			set
			{
				unplanned_code previousValue = this._unplanned_code1.Entity;
				if (((previousValue != value) 
							|| (this._unplanned_code1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._unplanned_code1.Entity = null;
						previousValue.unplanned_codes.Remove(this);
					}
					this._unplanned_code1.Entity = value;
					if ((value != null))
					{
						value.unplanned_codes.Add(this);
						this._parent_id = value.id;
					}
					else
					{
						this._parent_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("unplanned_code1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_unplanned_code", Storage="_team", ThisKey="team_id", OtherKey="id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.unplanned_codes.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.unplanned_codes.Add(this);
						this._team_id = value.id;
					}
					else
					{
						this._team_id = default(long);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_weekly_tasks(weekly_task entity)
		{
			this.SendPropertyChanging();
			entity.unplanned_code = this;
		}
		
		private void detach_weekly_tasks(weekly_task entity)
		{
			this.SendPropertyChanging();
			entity.unplanned_code = null;
		}
		
		private void attach_team_unplanned_codes(team_unplanned_code entity)
		{
			this.SendPropertyChanging();
			entity.unplanned_code = this;
		}
		
		private void detach_team_unplanned_codes(team_unplanned_code entity)
		{
			this.SendPropertyChanging();
			entity.unplanned_code = null;
		}
		
		private void attach_unplanned_codes(unplanned_code entity)
		{
			this.SendPropertyChanging();
			entity.unplanned_code1 = this;
		}
		
		private void detach_unplanned_codes(unplanned_code entity)
		{
			this.SendPropertyChanging();
			entity.unplanned_code1 = null;
		}
		
		private void attach_unplanned_codes_descriptions(unplanned_codes_description entity)
		{
			this.SendPropertyChanging();
			entity.unplanned_code = this;
		}
		
		private void detach_unplanned_codes_descriptions(unplanned_codes_description entity)
		{
			this.SendPropertyChanging();
			entity.unplanned_code = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.unplanned_codes_descriptions")]
	public partial class unplanned_codes_description : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _team_id;
		
		private long _unplanned_code_id;
		
		private string _description;
		
		private EntityRef<team> _team;
		
		private EntityRef<unplanned_code> _unplanned_code;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onteam_idChanging(long value);
    partial void Onteam_idChanged();
    partial void Onunplanned_code_idChanging(long value);
    partial void Onunplanned_code_idChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public unplanned_codes_description()
		{
			this._team = default(EntityRef<team>);
			this._unplanned_code = default(EntityRef<unplanned_code>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long team_id
		{
			get
			{
				return this._team_id;
			}
			set
			{
				if ((this._team_id != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam_idChanging(value);
					this.SendPropertyChanging();
					this._team_id = value;
					this.SendPropertyChanged("team_id");
					this.Onteam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unplanned_code_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long unplanned_code_id
		{
			get
			{
				return this._unplanned_code_id;
			}
			set
			{
				if ((this._unplanned_code_id != value))
				{
					if (this._unplanned_code.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onunplanned_code_idChanging(value);
					this.SendPropertyChanging();
					this._unplanned_code_id = value;
					this.SendPropertyChanged("unplanned_code_id");
					this.Onunplanned_code_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_unplanned_codes_description", Storage="_team", ThisKey="team_id", OtherKey="id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.unplanned_codes_descriptions.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.unplanned_codes_descriptions.Add(this);
						this._team_id = value.id;
					}
					else
					{
						this._team_id = default(long);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="unplanned_code_unplanned_codes_description", Storage="_unplanned_code", ThisKey="unplanned_code_id", OtherKey="id", IsForeignKey=true)]
		public unplanned_code unplanned_code
		{
			get
			{
				return this._unplanned_code.Entity;
			}
			set
			{
				unplanned_code previousValue = this._unplanned_code.Entity;
				if (((previousValue != value) 
							|| (this._unplanned_code.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._unplanned_code.Entity = null;
						previousValue.unplanned_codes_descriptions.Remove(this);
					}
					this._unplanned_code.Entity = value;
					if ((value != null))
					{
						value.unplanned_codes_descriptions.Add(this);
						this._unplanned_code_id = value.id;
					}
					else
					{
						this._unplanned_code_id = default(long);
					}
					this.SendPropertyChanged("unplanned_code");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.weekly_plan")]
	public partial class weekly_plan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _profile_id;
		
		private long _team_id;
		
		private System.DateTime _week_ending;
		
		private System.Nullable<System.DateTime> _plan_submitted;
		
		private System.Nullable<System.DateTime> _log_submitted;
		
		private string _state;
		
		private System.DateTime _modified;
		
		private System.Nullable<long> _plan_approved_by;
		
		private System.Nullable<long> _log_approved_by;
		
		private EntitySet<weekly_task> _weekly_tasks;
		
		private EntitySet<weekly_plan_leave> _weekly_plan_leaves;
		
		private EntityRef<profile> _profile;
		
		private EntityRef<profile> _profile1;
		
		private EntityRef<profile> _profile2;
		
		private EntityRef<team> _team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onprofile_idChanging(long value);
    partial void Onprofile_idChanged();
    partial void Onteam_idChanging(long value);
    partial void Onteam_idChanged();
    partial void Onweek_endingChanging(System.DateTime value);
    partial void Onweek_endingChanged();
    partial void Onplan_submittedChanging(System.Nullable<System.DateTime> value);
    partial void Onplan_submittedChanged();
    partial void Onlog_submittedChanging(System.Nullable<System.DateTime> value);
    partial void Onlog_submittedChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    partial void OnmodifiedChanging(System.DateTime value);
    partial void OnmodifiedChanged();
    partial void Onplan_approved_byChanging(System.Nullable<long> value);
    partial void Onplan_approved_byChanged();
    partial void Onlog_approved_byChanging(System.Nullable<long> value);
    partial void Onlog_approved_byChanged();
    #endregion
		
		public weekly_plan()
		{
			this._weekly_tasks = new EntitySet<weekly_task>(new Action<weekly_task>(this.attach_weekly_tasks), new Action<weekly_task>(this.detach_weekly_tasks));
			this._weekly_plan_leaves = new EntitySet<weekly_plan_leave>(new Action<weekly_plan_leave>(this.attach_weekly_plan_leaves), new Action<weekly_plan_leave>(this.detach_weekly_plan_leaves));
			this._profile = default(EntityRef<profile>);
			this._profile1 = default(EntityRef<profile>);
			this._profile2 = default(EntityRef<profile>);
			this._team = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profile_id", DbType="BigInt NOT NULL")]
		public long profile_id
		{
			get
			{
				return this._profile_id;
			}
			set
			{
				if ((this._profile_id != value))
				{
					if (this._profile2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprofile_idChanging(value);
					this.SendPropertyChanging();
					this._profile_id = value;
					this.SendPropertyChanged("profile_id");
					this.Onprofile_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_id", DbType="BigInt NOT NULL")]
		public long team_id
		{
			get
			{
				return this._team_id;
			}
			set
			{
				if ((this._team_id != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam_idChanging(value);
					this.SendPropertyChanging();
					this._team_id = value;
					this.SendPropertyChanged("team_id");
					this.Onteam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_week_ending", DbType="DateTime NOT NULL")]
		public System.DateTime week_ending
		{
			get
			{
				return this._week_ending;
			}
			set
			{
				if ((this._week_ending != value))
				{
					this.Onweek_endingChanging(value);
					this.SendPropertyChanging();
					this._week_ending = value;
					this.SendPropertyChanged("week_ending");
					this.Onweek_endingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_plan_submitted", DbType="DateTime")]
		public System.Nullable<System.DateTime> plan_submitted
		{
			get
			{
				return this._plan_submitted;
			}
			set
			{
				if ((this._plan_submitted != value))
				{
					this.Onplan_submittedChanging(value);
					this.SendPropertyChanging();
					this._plan_submitted = value;
					this.SendPropertyChanged("plan_submitted");
					this.Onplan_submittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_log_submitted", DbType="DateTime")]
		public System.Nullable<System.DateTime> log_submitted
		{
			get
			{
				return this._log_submitted;
			}
			set
			{
				if ((this._log_submitted != value))
				{
					this.Onlog_submittedChanging(value);
					this.SendPropertyChanging();
					this._log_submitted = value;
					this.SendPropertyChanged("log_submitted");
					this.Onlog_submittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="VarChar(16)")]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modified", DbType="DateTime NOT NULL")]
		public System.DateTime modified
		{
			get
			{
				return this._modified;
			}
			set
			{
				if ((this._modified != value))
				{
					this.OnmodifiedChanging(value);
					this.SendPropertyChanging();
					this._modified = value;
					this.SendPropertyChanged("modified");
					this.OnmodifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_plan_approved_by", DbType="BigInt")]
		public System.Nullable<long> plan_approved_by
		{
			get
			{
				return this._plan_approved_by;
			}
			set
			{
				if ((this._plan_approved_by != value))
				{
					if (this._profile1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onplan_approved_byChanging(value);
					this.SendPropertyChanging();
					this._plan_approved_by = value;
					this.SendPropertyChanged("plan_approved_by");
					this.Onplan_approved_byChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_log_approved_by", DbType="BigInt")]
		public System.Nullable<long> log_approved_by
		{
			get
			{
				return this._log_approved_by;
			}
			set
			{
				if ((this._log_approved_by != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onlog_approved_byChanging(value);
					this.SendPropertyChanging();
					this._log_approved_by = value;
					this.SendPropertyChanged("log_approved_by");
					this.Onlog_approved_byChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weekly_plan_weekly_task", Storage="_weekly_tasks", ThisKey="id", OtherKey="weekly_plan_id")]
		public EntitySet<weekly_task> weekly_tasks
		{
			get
			{
				return this._weekly_tasks;
			}
			set
			{
				this._weekly_tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weekly_plan_weekly_plan_leave", Storage="_weekly_plan_leaves", ThisKey="id", OtherKey="weekly_plan_id")]
		public EntitySet<weekly_plan_leave> weekly_plan_leaves
		{
			get
			{
				return this._weekly_plan_leaves;
			}
			set
			{
				this._weekly_plan_leaves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_weekly_plan", Storage="_profile", ThisKey="log_approved_by", OtherKey="id", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.weekly_plans.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.weekly_plans.Add(this);
						this._log_approved_by = value.id;
					}
					else
					{
						this._log_approved_by = default(Nullable<long>);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_weekly_plan1", Storage="_profile1", ThisKey="plan_approved_by", OtherKey="id", IsForeignKey=true)]
		public profile profile1
		{
			get
			{
				return this._profile1.Entity;
			}
			set
			{
				profile previousValue = this._profile1.Entity;
				if (((previousValue != value) 
							|| (this._profile1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile1.Entity = null;
						previousValue.weekly_plans1.Remove(this);
					}
					this._profile1.Entity = value;
					if ((value != null))
					{
						value.weekly_plans1.Add(this);
						this._plan_approved_by = value.id;
					}
					else
					{
						this._plan_approved_by = default(Nullable<long>);
					}
					this.SendPropertyChanged("profile1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_weekly_plan2", Storage="_profile2", ThisKey="profile_id", OtherKey="id", IsForeignKey=true)]
		public profile profile2
		{
			get
			{
				return this._profile2.Entity;
			}
			set
			{
				profile previousValue = this._profile2.Entity;
				if (((previousValue != value) 
							|| (this._profile2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile2.Entity = null;
						previousValue.weekly_plans2.Remove(this);
					}
					this._profile2.Entity = value;
					if ((value != null))
					{
						value.weekly_plans2.Add(this);
						this._profile_id = value.id;
					}
					else
					{
						this._profile_id = default(long);
					}
					this.SendPropertyChanged("profile2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_weekly_plan", Storage="_team", ThisKey="team_id", OtherKey="id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.weekly_plans.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.weekly_plans.Add(this);
						this._team_id = value.id;
					}
					else
					{
						this._team_id = default(long);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_weekly_tasks(weekly_task entity)
		{
			this.SendPropertyChanging();
			entity.weekly_plan = this;
		}
		
		private void detach_weekly_tasks(weekly_task entity)
		{
			this.SendPropertyChanging();
			entity.weekly_plan = null;
		}
		
		private void attach_weekly_plan_leaves(weekly_plan_leave entity)
		{
			this.SendPropertyChanging();
			entity.weekly_plan = this;
		}
		
		private void detach_weekly_plan_leaves(weekly_plan_leave entity)
		{
			this.SendPropertyChanging();
			entity.weekly_plan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.weekly_plan_leave")]
	public partial class weekly_plan_leave : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _weekly_plan_id;
		
		private int _day_of_week;
		
		private double _plan_hours;
		
		private double _actual_hours;
		
		private bool _planned;
		
		private EntityRef<weekly_plan> _weekly_plan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onweekly_plan_idChanging(long value);
    partial void Onweekly_plan_idChanged();
    partial void Onday_of_weekChanging(int value);
    partial void Onday_of_weekChanged();
    partial void Onplan_hoursChanging(double value);
    partial void Onplan_hoursChanged();
    partial void Onactual_hoursChanging(double value);
    partial void Onactual_hoursChanged();
    partial void OnplannedChanging(bool value);
    partial void OnplannedChanged();
    #endregion
		
		public weekly_plan_leave()
		{
			this._weekly_plan = default(EntityRef<weekly_plan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weekly_plan_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long weekly_plan_id
		{
			get
			{
				return this._weekly_plan_id;
			}
			set
			{
				if ((this._weekly_plan_id != value))
				{
					if (this._weekly_plan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onweekly_plan_idChanging(value);
					this.SendPropertyChanging();
					this._weekly_plan_id = value;
					this.SendPropertyChanged("weekly_plan_id");
					this.Onweekly_plan_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_day_of_week", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int day_of_week
		{
			get
			{
				return this._day_of_week;
			}
			set
			{
				if ((this._day_of_week != value))
				{
					this.Onday_of_weekChanging(value);
					this.SendPropertyChanging();
					this._day_of_week = value;
					this.SendPropertyChanged("day_of_week");
					this.Onday_of_weekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_plan_hours", DbType="Float NOT NULL")]
		public double plan_hours
		{
			get
			{
				return this._plan_hours;
			}
			set
			{
				if ((this._plan_hours != value))
				{
					this.Onplan_hoursChanging(value);
					this.SendPropertyChanging();
					this._plan_hours = value;
					this.SendPropertyChanged("plan_hours");
					this.Onplan_hoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_actual_hours", DbType="Float NOT NULL")]
		public double actual_hours
		{
			get
			{
				return this._actual_hours;
			}
			set
			{
				if ((this._actual_hours != value))
				{
					this.Onactual_hoursChanging(value);
					this.SendPropertyChanging();
					this._actual_hours = value;
					this.SendPropertyChanged("actual_hours");
					this.Onactual_hoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_planned", DbType="Bit NOT NULL")]
		public bool planned
		{
			get
			{
				return this._planned;
			}
			set
			{
				if ((this._planned != value))
				{
					this.OnplannedChanging(value);
					this.SendPropertyChanging();
					this._planned = value;
					this.SendPropertyChanged("planned");
					this.OnplannedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weekly_plan_weekly_plan_leave", Storage="_weekly_plan", ThisKey="weekly_plan_id", OtherKey="id", IsForeignKey=true)]
		public weekly_plan weekly_plan
		{
			get
			{
				return this._weekly_plan.Entity;
			}
			set
			{
				weekly_plan previousValue = this._weekly_plan.Entity;
				if (((previousValue != value) 
							|| (this._weekly_plan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._weekly_plan.Entity = null;
						previousValue.weekly_plan_leaves.Remove(this);
					}
					this._weekly_plan.Entity = value;
					if ((value != null))
					{
						value.weekly_plan_leaves.Add(this);
						this._weekly_plan_id = value.id;
					}
					else
					{
						this._weekly_plan_id = default(long);
					}
					this.SendPropertyChanged("weekly_plan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.weekly_task_barrier_hours")]
	public partial class weekly_task_barrier_hour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _weekly_task_barrier_id;
		
		private int _day_of_week;
		
		private double _hours;
		
		private EntityRef<weekly_task_barrier> _weekly_task_barrier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onweekly_task_barrier_idChanging(long value);
    partial void Onweekly_task_barrier_idChanged();
    partial void Onday_of_weekChanging(int value);
    partial void Onday_of_weekChanged();
    partial void OnhoursChanging(double value);
    partial void OnhoursChanged();
    #endregion
		
		public weekly_task_barrier_hour()
		{
			this._weekly_task_barrier = default(EntityRef<weekly_task_barrier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weekly_task_barrier_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long weekly_task_barrier_id
		{
			get
			{
				return this._weekly_task_barrier_id;
			}
			set
			{
				if ((this._weekly_task_barrier_id != value))
				{
					if (this._weekly_task_barrier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onweekly_task_barrier_idChanging(value);
					this.SendPropertyChanging();
					this._weekly_task_barrier_id = value;
					this.SendPropertyChanged("weekly_task_barrier_id");
					this.Onweekly_task_barrier_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_day_of_week", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int day_of_week
		{
			get
			{
				return this._day_of_week;
			}
			set
			{
				if ((this._day_of_week != value))
				{
					this.Onday_of_weekChanging(value);
					this.SendPropertyChanging();
					this._day_of_week = value;
					this.SendPropertyChanged("day_of_week");
					this.Onday_of_weekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hours", DbType="Float NOT NULL")]
		public double hours
		{
			get
			{
				return this._hours;
			}
			set
			{
				if ((this._hours != value))
				{
					this.OnhoursChanging(value);
					this.SendPropertyChanging();
					this._hours = value;
					this.SendPropertyChanged("hours");
					this.OnhoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weekly_task_barrier_weekly_task_barrier_hour", Storage="_weekly_task_barrier", ThisKey="weekly_task_barrier_id", OtherKey="id", IsForeignKey=true)]
		public weekly_task_barrier weekly_task_barrier
		{
			get
			{
				return this._weekly_task_barrier.Entity;
			}
			set
			{
				weekly_task_barrier previousValue = this._weekly_task_barrier.Entity;
				if (((previousValue != value) 
							|| (this._weekly_task_barrier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._weekly_task_barrier.Entity = null;
						previousValue.weekly_task_barrier_hours.Remove(this);
					}
					this._weekly_task_barrier.Entity = value;
					if ((value != null))
					{
						value.weekly_task_barrier_hours.Add(this);
						this._weekly_task_barrier_id = value.id;
					}
					else
					{
						this._weekly_task_barrier_id = default(long);
					}
					this.SendPropertyChanged("weekly_task_barrier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.weekly_task_barriers")]
	public partial class weekly_task_barrier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _barrier_id;
		
		private string _barrier_type;
		
		private long _weekly_task_id;
		
		private string _comment;
		
		private string _ticket;
		
		private EntitySet<weekly_task_barrier_hour> _weekly_task_barrier_hours;
		
		private EntityRef<barrier> _barrier;
		
		private EntityRef<weekly_task> _weekly_task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onbarrier_idChanging(long value);
    partial void Onbarrier_idChanged();
    partial void Onbarrier_typeChanging(string value);
    partial void Onbarrier_typeChanged();
    partial void Onweekly_task_idChanging(long value);
    partial void Onweekly_task_idChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void OnticketChanging(string value);
    partial void OnticketChanged();
    #endregion
		
		public weekly_task_barrier()
		{
			this._weekly_task_barrier_hours = new EntitySet<weekly_task_barrier_hour>(new Action<weekly_task_barrier_hour>(this.attach_weekly_task_barrier_hours), new Action<weekly_task_barrier_hour>(this.detach_weekly_task_barrier_hours));
			this._barrier = default(EntityRef<barrier>);
			this._weekly_task = default(EntityRef<weekly_task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_barrier_id", DbType="BigInt NOT NULL")]
		public long barrier_id
		{
			get
			{
				return this._barrier_id;
			}
			set
			{
				if ((this._barrier_id != value))
				{
					if (this._barrier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onbarrier_idChanging(value);
					this.SendPropertyChanging();
					this._barrier_id = value;
					this.SendPropertyChanged("barrier_id");
					this.Onbarrier_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_barrier_type", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string barrier_type
		{
			get
			{
				return this._barrier_type;
			}
			set
			{
				if ((this._barrier_type != value))
				{
					this.Onbarrier_typeChanging(value);
					this.SendPropertyChanging();
					this._barrier_type = value;
					this.SendPropertyChanged("barrier_type");
					this.Onbarrier_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weekly_task_id", DbType="BigInt NOT NULL")]
		public long weekly_task_id
		{
			get
			{
				return this._weekly_task_id;
			}
			set
			{
				if ((this._weekly_task_id != value))
				{
					if (this._weekly_task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onweekly_task_idChanging(value);
					this.SendPropertyChanging();
					this._weekly_task_id = value;
					this.SendPropertyChanged("weekly_task_id");
					this.Onweekly_task_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticket", DbType="VarChar(64)")]
		public string ticket
		{
			get
			{
				return this._ticket;
			}
			set
			{
				if ((this._ticket != value))
				{
					this.OnticketChanging(value);
					this.SendPropertyChanging();
					this._ticket = value;
					this.SendPropertyChanged("ticket");
					this.OnticketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weekly_task_barrier_weekly_task_barrier_hour", Storage="_weekly_task_barrier_hours", ThisKey="id", OtherKey="weekly_task_barrier_id")]
		public EntitySet<weekly_task_barrier_hour> weekly_task_barrier_hours
		{
			get
			{
				return this._weekly_task_barrier_hours;
			}
			set
			{
				this._weekly_task_barrier_hours.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="barrier_weekly_task_barrier", Storage="_barrier", ThisKey="barrier_id", OtherKey="id", IsForeignKey=true)]
		public barrier barrier
		{
			get
			{
				return this._barrier.Entity;
			}
			set
			{
				barrier previousValue = this._barrier.Entity;
				if (((previousValue != value) 
							|| (this._barrier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._barrier.Entity = null;
						previousValue.weekly_task_barriers.Remove(this);
					}
					this._barrier.Entity = value;
					if ((value != null))
					{
						value.weekly_task_barriers.Add(this);
						this._barrier_id = value.id;
					}
					else
					{
						this._barrier_id = default(long);
					}
					this.SendPropertyChanged("barrier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weekly_task_weekly_task_barrier", Storage="_weekly_task", ThisKey="weekly_task_id", OtherKey="id", IsForeignKey=true)]
		public weekly_task weekly_task
		{
			get
			{
				return this._weekly_task.Entity;
			}
			set
			{
				weekly_task previousValue = this._weekly_task.Entity;
				if (((previousValue != value) 
							|| (this._weekly_task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._weekly_task.Entity = null;
						previousValue.weekly_task_barriers.Remove(this);
					}
					this._weekly_task.Entity = value;
					if ((value != null))
					{
						value.weekly_task_barriers.Add(this);
						this._weekly_task_id = value.id;
					}
					else
					{
						this._weekly_task_id = default(long);
					}
					this.SendPropertyChanged("weekly_task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_weekly_task_barrier_hours(weekly_task_barrier_hour entity)
		{
			this.SendPropertyChanging();
			entity.weekly_task_barrier = this;
		}
		
		private void detach_weekly_task_barrier_hours(weekly_task_barrier_hour entity)
		{
			this.SendPropertyChanging();
			entity.weekly_task_barrier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.weekly_task_hours")]
	public partial class weekly_task_hour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _weekly_task_id;
		
		private int _day_of_week;
		
		private double _plan_hours;
		
		private double _actual_hours;
		
		private EntityRef<weekly_task> _weekly_task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onweekly_task_idChanging(long value);
    partial void Onweekly_task_idChanged();
    partial void Onday_of_weekChanging(int value);
    partial void Onday_of_weekChanged();
    partial void Onplan_hoursChanging(double value);
    partial void Onplan_hoursChanged();
    partial void Onactual_hoursChanging(double value);
    partial void Onactual_hoursChanged();
    #endregion
		
		public weekly_task_hour()
		{
			this._weekly_task = default(EntityRef<weekly_task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weekly_task_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long weekly_task_id
		{
			get
			{
				return this._weekly_task_id;
			}
			set
			{
				if ((this._weekly_task_id != value))
				{
					if (this._weekly_task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onweekly_task_idChanging(value);
					this.SendPropertyChanging();
					this._weekly_task_id = value;
					this.SendPropertyChanged("weekly_task_id");
					this.Onweekly_task_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_day_of_week", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int day_of_week
		{
			get
			{
				return this._day_of_week;
			}
			set
			{
				if ((this._day_of_week != value))
				{
					this.Onday_of_weekChanging(value);
					this.SendPropertyChanging();
					this._day_of_week = value;
					this.SendPropertyChanged("day_of_week");
					this.Onday_of_weekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_plan_hours", DbType="Float NOT NULL")]
		public double plan_hours
		{
			get
			{
				return this._plan_hours;
			}
			set
			{
				if ((this._plan_hours != value))
				{
					this.Onplan_hoursChanging(value);
					this.SendPropertyChanging();
					this._plan_hours = value;
					this.SendPropertyChanged("plan_hours");
					this.Onplan_hoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_actual_hours", DbType="Float NOT NULL")]
		public double actual_hours
		{
			get
			{
				return this._actual_hours;
			}
			set
			{
				if ((this._actual_hours != value))
				{
					this.Onactual_hoursChanging(value);
					this.SendPropertyChanging();
					this._actual_hours = value;
					this.SendPropertyChanged("actual_hours");
					this.Onactual_hoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="weekly_task_weekly_task_hour", Storage="_weekly_task", ThisKey="weekly_task_id", OtherKey="id", IsForeignKey=true)]
		public weekly_task weekly_task
		{
			get
			{
				return this._weekly_task.Entity;
			}
			set
			{
				weekly_task previousValue = this._weekly_task.Entity;
				if (((previousValue != value) 
							|| (this._weekly_task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._weekly_task.Entity = null;
						previousValue.weekly_task_hours.Remove(this);
					}
					this._weekly_task.Entity = value;
					if ((value != null))
					{
						value.weekly_task_hours.Add(this);
						this._weekly_task_id = value.id;
					}
					else
					{
						this._weekly_task_id = default(long);
					}
					this.SendPropertyChanged("weekly_task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
